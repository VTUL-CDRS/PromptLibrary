
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Prompt
 * 
 */
export type Prompt = $Result.DefaultSelection<Prisma.$PromptPayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Tag
 * 
 */
export type Tag = $Result.DefaultSelection<Prisma.$TagPayload>
/**
 * Model LLM
 * 
 */
export type LLM = $Result.DefaultSelection<Prisma.$LLMPayload>
/**
 * Model BookMarked
 * 
 */
export type BookMarked = $Result.DefaultSelection<Prisma.$BookMarkedPayload>
/**
 * Model HasTag
 * 
 */
export type HasTag = $Result.DefaultSelection<Prisma.$HasTagPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Prompts
 * const prompts = await prisma.prompt.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Prompts
   * const prompts = await prisma.prompt.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.prompt`: Exposes CRUD operations for the **Prompt** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Prompts
    * const prompts = await prisma.prompt.findMany()
    * ```
    */
  get prompt(): Prisma.PromptDelegate<ExtArgs>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs>;

  /**
   * `prisma.tag`: Exposes CRUD operations for the **Tag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tags
    * const tags = await prisma.tag.findMany()
    * ```
    */
  get tag(): Prisma.TagDelegate<ExtArgs>;

  /**
   * `prisma.lLM`: Exposes CRUD operations for the **LLM** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LLMS
    * const lLMS = await prisma.lLM.findMany()
    * ```
    */
  get lLM(): Prisma.LLMDelegate<ExtArgs>;

  /**
   * `prisma.bookMarked`: Exposes CRUD operations for the **BookMarked** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BookMarkeds
    * const bookMarkeds = await prisma.bookMarked.findMany()
    * ```
    */
  get bookMarked(): Prisma.BookMarkedDelegate<ExtArgs>;

  /**
   * `prisma.hasTag`: Exposes CRUD operations for the **HasTag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HasTags
    * const hasTags = await prisma.hasTag.findMany()
    * ```
    */
  get hasTag(): Prisma.HasTagDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.9.1
   * Query Engine version: 23fdc5965b1e05fc54e5f26ed3de66776b93de64
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Prompt: 'Prompt',
    Account: 'Account',
    Tag: 'Tag',
    LLM: 'LLM',
    BookMarked: 'BookMarked',
    HasTag: 'HasTag'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'prompt' | 'account' | 'tag' | 'lLM' | 'bookMarked' | 'hasTag'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Prompt: {
        payload: Prisma.$PromptPayload<ExtArgs>
        fields: Prisma.PromptFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PromptFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PromptPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PromptFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PromptPayload>
          }
          findFirst: {
            args: Prisma.PromptFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PromptPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PromptFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PromptPayload>
          }
          findMany: {
            args: Prisma.PromptFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PromptPayload>[]
          }
          create: {
            args: Prisma.PromptCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PromptPayload>
          }
          createMany: {
            args: Prisma.PromptCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PromptDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PromptPayload>
          }
          update: {
            args: Prisma.PromptUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PromptPayload>
          }
          deleteMany: {
            args: Prisma.PromptDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PromptUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PromptUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PromptPayload>
          }
          aggregate: {
            args: Prisma.PromptAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePrompt>
          }
          groupBy: {
            args: Prisma.PromptGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PromptGroupByOutputType>[]
          }
          count: {
            args: Prisma.PromptCountArgs<ExtArgs>,
            result: $Utils.Optional<PromptCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>,
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Tag: {
        payload: Prisma.$TagPayload<ExtArgs>
        fields: Prisma.TagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TagFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TagFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findFirst: {
            args: Prisma.TagFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TagFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findMany: {
            args: Prisma.TagFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          create: {
            args: Prisma.TagCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          createMany: {
            args: Prisma.TagCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TagDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          update: {
            args: Prisma.TagUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          deleteMany: {
            args: Prisma.TagDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TagUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TagUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          aggregate: {
            args: Prisma.TagAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTag>
          }
          groupBy: {
            args: Prisma.TagGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TagGroupByOutputType>[]
          }
          count: {
            args: Prisma.TagCountArgs<ExtArgs>,
            result: $Utils.Optional<TagCountAggregateOutputType> | number
          }
        }
      }
      LLM: {
        payload: Prisma.$LLMPayload<ExtArgs>
        fields: Prisma.LLMFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LLMFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LLMPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LLMFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LLMPayload>
          }
          findFirst: {
            args: Prisma.LLMFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LLMPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LLMFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LLMPayload>
          }
          findMany: {
            args: Prisma.LLMFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LLMPayload>[]
          }
          create: {
            args: Prisma.LLMCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LLMPayload>
          }
          createMany: {
            args: Prisma.LLMCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.LLMDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LLMPayload>
          }
          update: {
            args: Prisma.LLMUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LLMPayload>
          }
          deleteMany: {
            args: Prisma.LLMDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LLMUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LLMUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LLMPayload>
          }
          aggregate: {
            args: Prisma.LLMAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLLM>
          }
          groupBy: {
            args: Prisma.LLMGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LLMGroupByOutputType>[]
          }
          count: {
            args: Prisma.LLMCountArgs<ExtArgs>,
            result: $Utils.Optional<LLMCountAggregateOutputType> | number
          }
        }
      }
      BookMarked: {
        payload: Prisma.$BookMarkedPayload<ExtArgs>
        fields: Prisma.BookMarkedFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BookMarkedFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookMarkedPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BookMarkedFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookMarkedPayload>
          }
          findFirst: {
            args: Prisma.BookMarkedFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookMarkedPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BookMarkedFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookMarkedPayload>
          }
          findMany: {
            args: Prisma.BookMarkedFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookMarkedPayload>[]
          }
          create: {
            args: Prisma.BookMarkedCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookMarkedPayload>
          }
          createMany: {
            args: Prisma.BookMarkedCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.BookMarkedDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookMarkedPayload>
          }
          update: {
            args: Prisma.BookMarkedUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookMarkedPayload>
          }
          deleteMany: {
            args: Prisma.BookMarkedDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BookMarkedUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BookMarkedUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookMarkedPayload>
          }
          aggregate: {
            args: Prisma.BookMarkedAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBookMarked>
          }
          groupBy: {
            args: Prisma.BookMarkedGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BookMarkedGroupByOutputType>[]
          }
          count: {
            args: Prisma.BookMarkedCountArgs<ExtArgs>,
            result: $Utils.Optional<BookMarkedCountAggregateOutputType> | number
          }
        }
      }
      HasTag: {
        payload: Prisma.$HasTagPayload<ExtArgs>
        fields: Prisma.HasTagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HasTagFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HasTagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HasTagFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HasTagPayload>
          }
          findFirst: {
            args: Prisma.HasTagFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HasTagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HasTagFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HasTagPayload>
          }
          findMany: {
            args: Prisma.HasTagFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HasTagPayload>[]
          }
          create: {
            args: Prisma.HasTagCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HasTagPayload>
          }
          createMany: {
            args: Prisma.HasTagCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.HasTagDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HasTagPayload>
          }
          update: {
            args: Prisma.HasTagUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HasTagPayload>
          }
          deleteMany: {
            args: Prisma.HasTagDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.HasTagUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.HasTagUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HasTagPayload>
          }
          aggregate: {
            args: Prisma.HasTagAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateHasTag>
          }
          groupBy: {
            args: Prisma.HasTagGroupByArgs<ExtArgs>,
            result: $Utils.Optional<HasTagGroupByOutputType>[]
          }
          count: {
            args: Prisma.HasTagCountArgs<ExtArgs>,
            result: $Utils.Optional<HasTagCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PromptCountOutputType
   */

  export type PromptCountOutputType = {
    hasTag: number
    BookMarked: number
  }

  export type PromptCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hasTag?: boolean | PromptCountOutputTypeCountHasTagArgs
    BookMarked?: boolean | PromptCountOutputTypeCountBookMarkedArgs
  }

  // Custom InputTypes

  /**
   * PromptCountOutputType without action
   */
  export type PromptCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromptCountOutputType
     */
    select?: PromptCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * PromptCountOutputType without action
   */
  export type PromptCountOutputTypeCountHasTagArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HasTagWhereInput
  }


  /**
   * PromptCountOutputType without action
   */
  export type PromptCountOutputTypeCountBookMarkedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookMarkedWhereInput
  }



  /**
   * Count Type AccountCountOutputType
   */

  export type AccountCountOutputType = {
    bookMarked: number
  }

  export type AccountCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bookMarked?: boolean | AccountCountOutputTypeCountBookMarkedArgs
  }

  // Custom InputTypes

  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountCountOutputType
     */
    select?: AccountCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeCountBookMarkedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookMarkedWhereInput
  }



  /**
   * Count Type TagCountOutputType
   */

  export type TagCountOutputType = {
    HasTag: number
  }

  export type TagCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    HasTag?: boolean | TagCountOutputTypeCountHasTagArgs
  }

  // Custom InputTypes

  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagCountOutputType
     */
    select?: TagCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeCountHasTagArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HasTagWhereInput
  }



  /**
   * Count Type LLMCountOutputType
   */

  export type LLMCountOutputType = {
    Prompt: number
  }

  export type LLMCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Prompt?: boolean | LLMCountOutputTypeCountPromptArgs
  }

  // Custom InputTypes

  /**
   * LLMCountOutputType without action
   */
  export type LLMCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LLMCountOutputType
     */
    select?: LLMCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * LLMCountOutputType without action
   */
  export type LLMCountOutputTypeCountPromptArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PromptWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Prompt
   */

  export type AggregatePrompt = {
    _count: PromptCountAggregateOutputType | null
    _avg: PromptAvgAggregateOutputType | null
    _sum: PromptSumAggregateOutputType | null
    _min: PromptMinAggregateOutputType | null
    _max: PromptMaxAggregateOutputType | null
  }

  export type PromptAvgAggregateOutputType = {
    rating: number | null
  }

  export type PromptSumAggregateOutputType = {
    rating: number | null
  }

  export type PromptMinAggregateOutputType = {
    id: string | null
    prompt: string | null
    response: string | null
    image: string | null
    rating: number | null
    approved: boolean | null
    llmName: string | null
    createdAt: Date | null
  }

  export type PromptMaxAggregateOutputType = {
    id: string | null
    prompt: string | null
    response: string | null
    image: string | null
    rating: number | null
    approved: boolean | null
    llmName: string | null
    createdAt: Date | null
  }

  export type PromptCountAggregateOutputType = {
    id: number
    prompt: number
    response: number
    image: number
    rating: number
    approved: number
    llmName: number
    createdAt: number
    _all: number
  }


  export type PromptAvgAggregateInputType = {
    rating?: true
  }

  export type PromptSumAggregateInputType = {
    rating?: true
  }

  export type PromptMinAggregateInputType = {
    id?: true
    prompt?: true
    response?: true
    image?: true
    rating?: true
    approved?: true
    llmName?: true
    createdAt?: true
  }

  export type PromptMaxAggregateInputType = {
    id?: true
    prompt?: true
    response?: true
    image?: true
    rating?: true
    approved?: true
    llmName?: true
    createdAt?: true
  }

  export type PromptCountAggregateInputType = {
    id?: true
    prompt?: true
    response?: true
    image?: true
    rating?: true
    approved?: true
    llmName?: true
    createdAt?: true
    _all?: true
  }

  export type PromptAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Prompt to aggregate.
     */
    where?: PromptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prompts to fetch.
     */
    orderBy?: PromptOrderByWithRelationInput | PromptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PromptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prompts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prompts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Prompts
    **/
    _count?: true | PromptCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PromptAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PromptSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PromptMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PromptMaxAggregateInputType
  }

  export type GetPromptAggregateType<T extends PromptAggregateArgs> = {
        [P in keyof T & keyof AggregatePrompt]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePrompt[P]>
      : GetScalarType<T[P], AggregatePrompt[P]>
  }




  export type PromptGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PromptWhereInput
    orderBy?: PromptOrderByWithAggregationInput | PromptOrderByWithAggregationInput[]
    by: PromptScalarFieldEnum[] | PromptScalarFieldEnum
    having?: PromptScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PromptCountAggregateInputType | true
    _avg?: PromptAvgAggregateInputType
    _sum?: PromptSumAggregateInputType
    _min?: PromptMinAggregateInputType
    _max?: PromptMaxAggregateInputType
  }

  export type PromptGroupByOutputType = {
    id: string
    prompt: string
    response: string
    image: string
    rating: number
    approved: boolean
    llmName: string
    createdAt: Date
    _count: PromptCountAggregateOutputType | null
    _avg: PromptAvgAggregateOutputType | null
    _sum: PromptSumAggregateOutputType | null
    _min: PromptMinAggregateOutputType | null
    _max: PromptMaxAggregateOutputType | null
  }

  type GetPromptGroupByPayload<T extends PromptGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PromptGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PromptGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PromptGroupByOutputType[P]>
            : GetScalarType<T[P], PromptGroupByOutputType[P]>
        }
      >
    >


  export type PromptSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    prompt?: boolean
    response?: boolean
    image?: boolean
    rating?: boolean
    approved?: boolean
    llmName?: boolean
    createdAt?: boolean
    hasTag?: boolean | Prompt$hasTagArgs<ExtArgs>
    BookMarked?: boolean | Prompt$BookMarkedArgs<ExtArgs>
    llm?: boolean | LLMDefaultArgs<ExtArgs>
    _count?: boolean | PromptCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["prompt"]>

  export type PromptSelectScalar = {
    id?: boolean
    prompt?: boolean
    response?: boolean
    image?: boolean
    rating?: boolean
    approved?: boolean
    llmName?: boolean
    createdAt?: boolean
  }

  export type PromptInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hasTag?: boolean | Prompt$hasTagArgs<ExtArgs>
    BookMarked?: boolean | Prompt$BookMarkedArgs<ExtArgs>
    llm?: boolean | LLMDefaultArgs<ExtArgs>
    _count?: boolean | PromptCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $PromptPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Prompt"
    objects: {
      hasTag: Prisma.$HasTagPayload<ExtArgs>[]
      BookMarked: Prisma.$BookMarkedPayload<ExtArgs>[]
      llm: Prisma.$LLMPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      prompt: string
      response: string
      image: string
      rating: number
      approved: boolean
      llmName: string
      createdAt: Date
    }, ExtArgs["result"]["prompt"]>
    composites: {}
  }


  type PromptGetPayload<S extends boolean | null | undefined | PromptDefaultArgs> = $Result.GetResult<Prisma.$PromptPayload, S>

  type PromptCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PromptFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PromptCountAggregateInputType | true
    }

  export interface PromptDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Prompt'], meta: { name: 'Prompt' } }
    /**
     * Find zero or one Prompt that matches the filter.
     * @param {PromptFindUniqueArgs} args - Arguments to find a Prompt
     * @example
     * // Get one Prompt
     * const prompt = await prisma.prompt.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PromptFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PromptFindUniqueArgs<ExtArgs>>
    ): Prisma__PromptClient<$Result.GetResult<Prisma.$PromptPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Prompt that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PromptFindUniqueOrThrowArgs} args - Arguments to find a Prompt
     * @example
     * // Get one Prompt
     * const prompt = await prisma.prompt.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PromptFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PromptFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PromptClient<$Result.GetResult<Prisma.$PromptPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Prompt that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromptFindFirstArgs} args - Arguments to find a Prompt
     * @example
     * // Get one Prompt
     * const prompt = await prisma.prompt.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PromptFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PromptFindFirstArgs<ExtArgs>>
    ): Prisma__PromptClient<$Result.GetResult<Prisma.$PromptPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Prompt that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromptFindFirstOrThrowArgs} args - Arguments to find a Prompt
     * @example
     * // Get one Prompt
     * const prompt = await prisma.prompt.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PromptFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PromptFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PromptClient<$Result.GetResult<Prisma.$PromptPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Prompts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromptFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Prompts
     * const prompts = await prisma.prompt.findMany()
     * 
     * // Get first 10 Prompts
     * const prompts = await prisma.prompt.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const promptWithIdOnly = await prisma.prompt.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PromptFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PromptFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PromptPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Prompt.
     * @param {PromptCreateArgs} args - Arguments to create a Prompt.
     * @example
     * // Create one Prompt
     * const Prompt = await prisma.prompt.create({
     *   data: {
     *     // ... data to create a Prompt
     *   }
     * })
     * 
    **/
    create<T extends PromptCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PromptCreateArgs<ExtArgs>>
    ): Prisma__PromptClient<$Result.GetResult<Prisma.$PromptPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Prompts.
     *     @param {PromptCreateManyArgs} args - Arguments to create many Prompts.
     *     @example
     *     // Create many Prompts
     *     const prompt = await prisma.prompt.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PromptCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PromptCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Prompt.
     * @param {PromptDeleteArgs} args - Arguments to delete one Prompt.
     * @example
     * // Delete one Prompt
     * const Prompt = await prisma.prompt.delete({
     *   where: {
     *     // ... filter to delete one Prompt
     *   }
     * })
     * 
    **/
    delete<T extends PromptDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PromptDeleteArgs<ExtArgs>>
    ): Prisma__PromptClient<$Result.GetResult<Prisma.$PromptPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Prompt.
     * @param {PromptUpdateArgs} args - Arguments to update one Prompt.
     * @example
     * // Update one Prompt
     * const prompt = await prisma.prompt.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PromptUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PromptUpdateArgs<ExtArgs>>
    ): Prisma__PromptClient<$Result.GetResult<Prisma.$PromptPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Prompts.
     * @param {PromptDeleteManyArgs} args - Arguments to filter Prompts to delete.
     * @example
     * // Delete a few Prompts
     * const { count } = await prisma.prompt.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PromptDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PromptDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Prompts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromptUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Prompts
     * const prompt = await prisma.prompt.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PromptUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PromptUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Prompt.
     * @param {PromptUpsertArgs} args - Arguments to update or create a Prompt.
     * @example
     * // Update or create a Prompt
     * const prompt = await prisma.prompt.upsert({
     *   create: {
     *     // ... data to create a Prompt
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Prompt we want to update
     *   }
     * })
    **/
    upsert<T extends PromptUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PromptUpsertArgs<ExtArgs>>
    ): Prisma__PromptClient<$Result.GetResult<Prisma.$PromptPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Prompts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromptCountArgs} args - Arguments to filter Prompts to count.
     * @example
     * // Count the number of Prompts
     * const count = await prisma.prompt.count({
     *   where: {
     *     // ... the filter for the Prompts we want to count
     *   }
     * })
    **/
    count<T extends PromptCountArgs>(
      args?: Subset<T, PromptCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PromptCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Prompt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromptAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PromptAggregateArgs>(args: Subset<T, PromptAggregateArgs>): Prisma.PrismaPromise<GetPromptAggregateType<T>>

    /**
     * Group by Prompt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromptGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PromptGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PromptGroupByArgs['orderBy'] }
        : { orderBy?: PromptGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PromptGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPromptGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Prompt model
   */
  readonly fields: PromptFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Prompt.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PromptClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    hasTag<T extends Prompt$hasTagArgs<ExtArgs> = {}>(args?: Subset<T, Prompt$hasTagArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HasTagPayload<ExtArgs>, T, 'findMany'> | Null>;

    BookMarked<T extends Prompt$BookMarkedArgs<ExtArgs> = {}>(args?: Subset<T, Prompt$BookMarkedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookMarkedPayload<ExtArgs>, T, 'findMany'> | Null>;

    llm<T extends LLMDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LLMDefaultArgs<ExtArgs>>): Prisma__LLMClient<$Result.GetResult<Prisma.$LLMPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Prompt model
   */ 
  interface PromptFieldRefs {
    readonly id: FieldRef<"Prompt", 'String'>
    readonly prompt: FieldRef<"Prompt", 'String'>
    readonly response: FieldRef<"Prompt", 'String'>
    readonly image: FieldRef<"Prompt", 'String'>
    readonly rating: FieldRef<"Prompt", 'Float'>
    readonly approved: FieldRef<"Prompt", 'Boolean'>
    readonly llmName: FieldRef<"Prompt", 'String'>
    readonly createdAt: FieldRef<"Prompt", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Prompt findUnique
   */
  export type PromptFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prompt
     */
    select?: PromptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PromptInclude<ExtArgs> | null
    /**
     * Filter, which Prompt to fetch.
     */
    where: PromptWhereUniqueInput
  }


  /**
   * Prompt findUniqueOrThrow
   */
  export type PromptFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prompt
     */
    select?: PromptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PromptInclude<ExtArgs> | null
    /**
     * Filter, which Prompt to fetch.
     */
    where: PromptWhereUniqueInput
  }


  /**
   * Prompt findFirst
   */
  export type PromptFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prompt
     */
    select?: PromptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PromptInclude<ExtArgs> | null
    /**
     * Filter, which Prompt to fetch.
     */
    where?: PromptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prompts to fetch.
     */
    orderBy?: PromptOrderByWithRelationInput | PromptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Prompts.
     */
    cursor?: PromptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prompts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prompts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Prompts.
     */
    distinct?: PromptScalarFieldEnum | PromptScalarFieldEnum[]
  }


  /**
   * Prompt findFirstOrThrow
   */
  export type PromptFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prompt
     */
    select?: PromptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PromptInclude<ExtArgs> | null
    /**
     * Filter, which Prompt to fetch.
     */
    where?: PromptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prompts to fetch.
     */
    orderBy?: PromptOrderByWithRelationInput | PromptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Prompts.
     */
    cursor?: PromptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prompts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prompts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Prompts.
     */
    distinct?: PromptScalarFieldEnum | PromptScalarFieldEnum[]
  }


  /**
   * Prompt findMany
   */
  export type PromptFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prompt
     */
    select?: PromptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PromptInclude<ExtArgs> | null
    /**
     * Filter, which Prompts to fetch.
     */
    where?: PromptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prompts to fetch.
     */
    orderBy?: PromptOrderByWithRelationInput | PromptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Prompts.
     */
    cursor?: PromptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prompts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prompts.
     */
    skip?: number
    distinct?: PromptScalarFieldEnum | PromptScalarFieldEnum[]
  }


  /**
   * Prompt create
   */
  export type PromptCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prompt
     */
    select?: PromptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PromptInclude<ExtArgs> | null
    /**
     * The data needed to create a Prompt.
     */
    data: XOR<PromptCreateInput, PromptUncheckedCreateInput>
  }


  /**
   * Prompt createMany
   */
  export type PromptCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Prompts.
     */
    data: PromptCreateManyInput | PromptCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Prompt update
   */
  export type PromptUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prompt
     */
    select?: PromptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PromptInclude<ExtArgs> | null
    /**
     * The data needed to update a Prompt.
     */
    data: XOR<PromptUpdateInput, PromptUncheckedUpdateInput>
    /**
     * Choose, which Prompt to update.
     */
    where: PromptWhereUniqueInput
  }


  /**
   * Prompt updateMany
   */
  export type PromptUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Prompts.
     */
    data: XOR<PromptUpdateManyMutationInput, PromptUncheckedUpdateManyInput>
    /**
     * Filter which Prompts to update
     */
    where?: PromptWhereInput
  }


  /**
   * Prompt upsert
   */
  export type PromptUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prompt
     */
    select?: PromptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PromptInclude<ExtArgs> | null
    /**
     * The filter to search for the Prompt to update in case it exists.
     */
    where: PromptWhereUniqueInput
    /**
     * In case the Prompt found by the `where` argument doesn't exist, create a new Prompt with this data.
     */
    create: XOR<PromptCreateInput, PromptUncheckedCreateInput>
    /**
     * In case the Prompt was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PromptUpdateInput, PromptUncheckedUpdateInput>
  }


  /**
   * Prompt delete
   */
  export type PromptDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prompt
     */
    select?: PromptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PromptInclude<ExtArgs> | null
    /**
     * Filter which Prompt to delete.
     */
    where: PromptWhereUniqueInput
  }


  /**
   * Prompt deleteMany
   */
  export type PromptDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Prompts to delete
     */
    where?: PromptWhereInput
  }


  /**
   * Prompt.hasTag
   */
  export type Prompt$hasTagArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HasTag
     */
    select?: HasTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HasTagInclude<ExtArgs> | null
    where?: HasTagWhereInput
    orderBy?: HasTagOrderByWithRelationInput | HasTagOrderByWithRelationInput[]
    cursor?: HasTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HasTagScalarFieldEnum | HasTagScalarFieldEnum[]
  }


  /**
   * Prompt.BookMarked
   */
  export type Prompt$BookMarkedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookMarked
     */
    select?: BookMarkedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookMarkedInclude<ExtArgs> | null
    where?: BookMarkedWhereInput
    orderBy?: BookMarkedOrderByWithRelationInput | BookMarkedOrderByWithRelationInput[]
    cursor?: BookMarkedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookMarkedScalarFieldEnum | BookMarkedScalarFieldEnum[]
  }


  /**
   * Prompt without action
   */
  export type PromptDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prompt
     */
    select?: PromptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PromptInclude<ExtArgs> | null
  }



  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    isModerator: boolean | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    isModerator: boolean | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    isModerator: number
    _all: number
  }


  export type AccountMinAggregateInputType = {
    id?: true
    isModerator?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    isModerator?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    isModerator?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    isModerator: boolean
    _count: AccountCountAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    isModerator?: boolean
    bookMarked?: boolean | Account$bookMarkedArgs<ExtArgs>
    _count?: boolean | AccountCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    isModerator?: boolean
  }

  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bookMarked?: boolean | Account$bookMarkedArgs<ExtArgs>
    _count?: boolean | AccountCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      bookMarked: Prisma.$BookMarkedPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      isModerator: boolean
    }, ExtArgs["result"]["account"]>
    composites: {}
  }


  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AccountFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Account that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AccountFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AccountFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
    **/
    create<T extends AccountCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AccountCreateArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Accounts.
     *     @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     *     @example
     *     // Create many Accounts
     *     const account = await prisma.account.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AccountCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
    **/
    delete<T extends AccountDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AccountUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AccountDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AccountUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
    **/
    upsert<T extends AccountUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    bookMarked<T extends Account$bookMarkedArgs<ExtArgs> = {}>(args?: Subset<T, Account$bookMarkedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookMarkedPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Account model
   */ 
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly isModerator: FieldRef<"Account", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }


  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }


  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }


  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }


  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
  }


  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }


  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
  }


  /**
   * Account.bookMarked
   */
  export type Account$bookMarkedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookMarked
     */
    select?: BookMarkedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookMarkedInclude<ExtArgs> | null
    where?: BookMarkedWhereInput
    orderBy?: BookMarkedOrderByWithRelationInput | BookMarkedOrderByWithRelationInput[]
    cursor?: BookMarkedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookMarkedScalarFieldEnum | BookMarkedScalarFieldEnum[]
  }


  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
  }



  /**
   * Model Tag
   */

  export type AggregateTag = {
    _count: TagCountAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  export type TagMinAggregateOutputType = {
    name: string | null
  }

  export type TagMaxAggregateOutputType = {
    name: string | null
  }

  export type TagCountAggregateOutputType = {
    name: number
    _all: number
  }


  export type TagMinAggregateInputType = {
    name?: true
  }

  export type TagMaxAggregateInputType = {
    name?: true
  }

  export type TagCountAggregateInputType = {
    name?: true
    _all?: true
  }

  export type TagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tag to aggregate.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tags
    **/
    _count?: true | TagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagMaxAggregateInputType
  }

  export type GetTagAggregateType<T extends TagAggregateArgs> = {
        [P in keyof T & keyof AggregateTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTag[P]>
      : GetScalarType<T[P], AggregateTag[P]>
  }




  export type TagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagWhereInput
    orderBy?: TagOrderByWithAggregationInput | TagOrderByWithAggregationInput[]
    by: TagScalarFieldEnum[] | TagScalarFieldEnum
    having?: TagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagCountAggregateInputType | true
    _min?: TagMinAggregateInputType
    _max?: TagMaxAggregateInputType
  }

  export type TagGroupByOutputType = {
    name: string
    _count: TagCountAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  type GetTagGroupByPayload<T extends TagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagGroupByOutputType[P]>
            : GetScalarType<T[P], TagGroupByOutputType[P]>
        }
      >
    >


  export type TagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    name?: boolean
    HasTag?: boolean | Tag$HasTagArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tag"]>

  export type TagSelectScalar = {
    name?: boolean
  }

  export type TagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    HasTag?: boolean | Tag$HasTagArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $TagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tag"
    objects: {
      HasTag: Prisma.$HasTagPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      name: string
    }, ExtArgs["result"]["tag"]>
    composites: {}
  }


  type TagGetPayload<S extends boolean | null | undefined | TagDefaultArgs> = $Result.GetResult<Prisma.$TagPayload, S>

  type TagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TagFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TagCountAggregateInputType | true
    }

  export interface TagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tag'], meta: { name: 'Tag' } }
    /**
     * Find zero or one Tag that matches the filter.
     * @param {TagFindUniqueArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TagFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TagFindUniqueArgs<ExtArgs>>
    ): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Tag that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TagFindUniqueOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TagFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TagFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Tag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TagFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TagFindFirstArgs<ExtArgs>>
    ): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Tag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TagFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TagFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tags
     * const tags = await prisma.tag.findMany()
     * 
     * // Get first 10 Tags
     * const tags = await prisma.tag.findMany({ take: 10 })
     * 
     * // Only select the `name`
     * const tagWithNameOnly = await prisma.tag.findMany({ select: { name: true } })
     * 
    **/
    findMany<T extends TagFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TagFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Tag.
     * @param {TagCreateArgs} args - Arguments to create a Tag.
     * @example
     * // Create one Tag
     * const Tag = await prisma.tag.create({
     *   data: {
     *     // ... data to create a Tag
     *   }
     * })
     * 
    **/
    create<T extends TagCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TagCreateArgs<ExtArgs>>
    ): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Tags.
     *     @param {TagCreateManyArgs} args - Arguments to create many Tags.
     *     @example
     *     // Create many Tags
     *     const tag = await prisma.tag.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TagCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TagCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Tag.
     * @param {TagDeleteArgs} args - Arguments to delete one Tag.
     * @example
     * // Delete one Tag
     * const Tag = await prisma.tag.delete({
     *   where: {
     *     // ... filter to delete one Tag
     *   }
     * })
     * 
    **/
    delete<T extends TagDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TagDeleteArgs<ExtArgs>>
    ): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Tag.
     * @param {TagUpdateArgs} args - Arguments to update one Tag.
     * @example
     * // Update one Tag
     * const tag = await prisma.tag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TagUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TagUpdateArgs<ExtArgs>>
    ): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Tags.
     * @param {TagDeleteManyArgs} args - Arguments to filter Tags to delete.
     * @example
     * // Delete a few Tags
     * const { count } = await prisma.tag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TagDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TagDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tags
     * const tag = await prisma.tag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TagUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TagUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tag.
     * @param {TagUpsertArgs} args - Arguments to update or create a Tag.
     * @example
     * // Update or create a Tag
     * const tag = await prisma.tag.upsert({
     *   create: {
     *     // ... data to create a Tag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tag we want to update
     *   }
     * })
    **/
    upsert<T extends TagUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TagUpsertArgs<ExtArgs>>
    ): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagCountArgs} args - Arguments to filter Tags to count.
     * @example
     * // Count the number of Tags
     * const count = await prisma.tag.count({
     *   where: {
     *     // ... the filter for the Tags we want to count
     *   }
     * })
    **/
    count<T extends TagCountArgs>(
      args?: Subset<T, TagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagAggregateArgs>(args: Subset<T, TagAggregateArgs>): Prisma.PrismaPromise<GetTagAggregateType<T>>

    /**
     * Group by Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagGroupByArgs['orderBy'] }
        : { orderBy?: TagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tag model
   */
  readonly fields: TagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    HasTag<T extends Tag$HasTagArgs<ExtArgs> = {}>(args?: Subset<T, Tag$HasTagArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HasTagPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Tag model
   */ 
  interface TagFieldRefs {
    readonly name: FieldRef<"Tag", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Tag findUnique
   */
  export type TagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }


  /**
   * Tag findUniqueOrThrow
   */
  export type TagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }


  /**
   * Tag findFirst
   */
  export type TagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }


  /**
   * Tag findFirstOrThrow
   */
  export type TagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }


  /**
   * Tag findMany
   */
  export type TagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tags to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }


  /**
   * Tag create
   */
  export type TagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to create a Tag.
     */
    data: XOR<TagCreateInput, TagUncheckedCreateInput>
  }


  /**
   * Tag createMany
   */
  export type TagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tags.
     */
    data: TagCreateManyInput | TagCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Tag update
   */
  export type TagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to update a Tag.
     */
    data: XOR<TagUpdateInput, TagUncheckedUpdateInput>
    /**
     * Choose, which Tag to update.
     */
    where: TagWhereUniqueInput
  }


  /**
   * Tag updateMany
   */
  export type TagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tags.
     */
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyInput>
    /**
     * Filter which Tags to update
     */
    where?: TagWhereInput
  }


  /**
   * Tag upsert
   */
  export type TagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The filter to search for the Tag to update in case it exists.
     */
    where: TagWhereUniqueInput
    /**
     * In case the Tag found by the `where` argument doesn't exist, create a new Tag with this data.
     */
    create: XOR<TagCreateInput, TagUncheckedCreateInput>
    /**
     * In case the Tag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TagUpdateInput, TagUncheckedUpdateInput>
  }


  /**
   * Tag delete
   */
  export type TagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter which Tag to delete.
     */
    where: TagWhereUniqueInput
  }


  /**
   * Tag deleteMany
   */
  export type TagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tags to delete
     */
    where?: TagWhereInput
  }


  /**
   * Tag.HasTag
   */
  export type Tag$HasTagArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HasTag
     */
    select?: HasTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HasTagInclude<ExtArgs> | null
    where?: HasTagWhereInput
    orderBy?: HasTagOrderByWithRelationInput | HasTagOrderByWithRelationInput[]
    cursor?: HasTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HasTagScalarFieldEnum | HasTagScalarFieldEnum[]
  }


  /**
   * Tag without action
   */
  export type TagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TagInclude<ExtArgs> | null
  }



  /**
   * Model LLM
   */

  export type AggregateLLM = {
    _count: LLMCountAggregateOutputType | null
    _min: LLMMinAggregateOutputType | null
    _max: LLMMaxAggregateOutputType | null
  }

  export type LLMMinAggregateOutputType = {
    llmName: string | null
  }

  export type LLMMaxAggregateOutputType = {
    llmName: string | null
  }

  export type LLMCountAggregateOutputType = {
    llmName: number
    _all: number
  }


  export type LLMMinAggregateInputType = {
    llmName?: true
  }

  export type LLMMaxAggregateInputType = {
    llmName?: true
  }

  export type LLMCountAggregateInputType = {
    llmName?: true
    _all?: true
  }

  export type LLMAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LLM to aggregate.
     */
    where?: LLMWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LLMS to fetch.
     */
    orderBy?: LLMOrderByWithRelationInput | LLMOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LLMWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LLMS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LLMS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LLMS
    **/
    _count?: true | LLMCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LLMMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LLMMaxAggregateInputType
  }

  export type GetLLMAggregateType<T extends LLMAggregateArgs> = {
        [P in keyof T & keyof AggregateLLM]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLLM[P]>
      : GetScalarType<T[P], AggregateLLM[P]>
  }




  export type LLMGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LLMWhereInput
    orderBy?: LLMOrderByWithAggregationInput | LLMOrderByWithAggregationInput[]
    by: LLMScalarFieldEnum[] | LLMScalarFieldEnum
    having?: LLMScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LLMCountAggregateInputType | true
    _min?: LLMMinAggregateInputType
    _max?: LLMMaxAggregateInputType
  }

  export type LLMGroupByOutputType = {
    llmName: string
    _count: LLMCountAggregateOutputType | null
    _min: LLMMinAggregateOutputType | null
    _max: LLMMaxAggregateOutputType | null
  }

  type GetLLMGroupByPayload<T extends LLMGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LLMGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LLMGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LLMGroupByOutputType[P]>
            : GetScalarType<T[P], LLMGroupByOutputType[P]>
        }
      >
    >


  export type LLMSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    llmName?: boolean
    Prompt?: boolean | LLM$PromptArgs<ExtArgs>
    _count?: boolean | LLMCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lLM"]>

  export type LLMSelectScalar = {
    llmName?: boolean
  }

  export type LLMInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Prompt?: boolean | LLM$PromptArgs<ExtArgs>
    _count?: boolean | LLMCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $LLMPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LLM"
    objects: {
      Prompt: Prisma.$PromptPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      llmName: string
    }, ExtArgs["result"]["lLM"]>
    composites: {}
  }


  type LLMGetPayload<S extends boolean | null | undefined | LLMDefaultArgs> = $Result.GetResult<Prisma.$LLMPayload, S>

  type LLMCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LLMFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LLMCountAggregateInputType | true
    }

  export interface LLMDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LLM'], meta: { name: 'LLM' } }
    /**
     * Find zero or one LLM that matches the filter.
     * @param {LLMFindUniqueArgs} args - Arguments to find a LLM
     * @example
     * // Get one LLM
     * const lLM = await prisma.lLM.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LLMFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LLMFindUniqueArgs<ExtArgs>>
    ): Prisma__LLMClient<$Result.GetResult<Prisma.$LLMPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one LLM that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LLMFindUniqueOrThrowArgs} args - Arguments to find a LLM
     * @example
     * // Get one LLM
     * const lLM = await prisma.lLM.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LLMFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LLMFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LLMClient<$Result.GetResult<Prisma.$LLMPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first LLM that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LLMFindFirstArgs} args - Arguments to find a LLM
     * @example
     * // Get one LLM
     * const lLM = await prisma.lLM.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LLMFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LLMFindFirstArgs<ExtArgs>>
    ): Prisma__LLMClient<$Result.GetResult<Prisma.$LLMPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first LLM that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LLMFindFirstOrThrowArgs} args - Arguments to find a LLM
     * @example
     * // Get one LLM
     * const lLM = await prisma.lLM.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LLMFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LLMFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LLMClient<$Result.GetResult<Prisma.$LLMPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more LLMS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LLMFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LLMS
     * const lLMS = await prisma.lLM.findMany()
     * 
     * // Get first 10 LLMS
     * const lLMS = await prisma.lLM.findMany({ take: 10 })
     * 
     * // Only select the `llmName`
     * const lLMWithLlmNameOnly = await prisma.lLM.findMany({ select: { llmName: true } })
     * 
    **/
    findMany<T extends LLMFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LLMFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LLMPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a LLM.
     * @param {LLMCreateArgs} args - Arguments to create a LLM.
     * @example
     * // Create one LLM
     * const LLM = await prisma.lLM.create({
     *   data: {
     *     // ... data to create a LLM
     *   }
     * })
     * 
    **/
    create<T extends LLMCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LLMCreateArgs<ExtArgs>>
    ): Prisma__LLMClient<$Result.GetResult<Prisma.$LLMPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many LLMS.
     *     @param {LLMCreateManyArgs} args - Arguments to create many LLMS.
     *     @example
     *     // Create many LLMS
     *     const lLM = await prisma.lLM.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LLMCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LLMCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a LLM.
     * @param {LLMDeleteArgs} args - Arguments to delete one LLM.
     * @example
     * // Delete one LLM
     * const LLM = await prisma.lLM.delete({
     *   where: {
     *     // ... filter to delete one LLM
     *   }
     * })
     * 
    **/
    delete<T extends LLMDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LLMDeleteArgs<ExtArgs>>
    ): Prisma__LLMClient<$Result.GetResult<Prisma.$LLMPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one LLM.
     * @param {LLMUpdateArgs} args - Arguments to update one LLM.
     * @example
     * // Update one LLM
     * const lLM = await prisma.lLM.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LLMUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LLMUpdateArgs<ExtArgs>>
    ): Prisma__LLMClient<$Result.GetResult<Prisma.$LLMPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more LLMS.
     * @param {LLMDeleteManyArgs} args - Arguments to filter LLMS to delete.
     * @example
     * // Delete a few LLMS
     * const { count } = await prisma.lLM.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LLMDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LLMDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LLMS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LLMUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LLMS
     * const lLM = await prisma.lLM.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LLMUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LLMUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LLM.
     * @param {LLMUpsertArgs} args - Arguments to update or create a LLM.
     * @example
     * // Update or create a LLM
     * const lLM = await prisma.lLM.upsert({
     *   create: {
     *     // ... data to create a LLM
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LLM we want to update
     *   }
     * })
    **/
    upsert<T extends LLMUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LLMUpsertArgs<ExtArgs>>
    ): Prisma__LLMClient<$Result.GetResult<Prisma.$LLMPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of LLMS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LLMCountArgs} args - Arguments to filter LLMS to count.
     * @example
     * // Count the number of LLMS
     * const count = await prisma.lLM.count({
     *   where: {
     *     // ... the filter for the LLMS we want to count
     *   }
     * })
    **/
    count<T extends LLMCountArgs>(
      args?: Subset<T, LLMCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LLMCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LLM.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LLMAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LLMAggregateArgs>(args: Subset<T, LLMAggregateArgs>): Prisma.PrismaPromise<GetLLMAggregateType<T>>

    /**
     * Group by LLM.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LLMGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LLMGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LLMGroupByArgs['orderBy'] }
        : { orderBy?: LLMGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LLMGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLLMGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LLM model
   */
  readonly fields: LLMFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LLM.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LLMClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Prompt<T extends LLM$PromptArgs<ExtArgs> = {}>(args?: Subset<T, LLM$PromptArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PromptPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the LLM model
   */ 
  interface LLMFieldRefs {
    readonly llmName: FieldRef<"LLM", 'String'>
  }
    

  // Custom InputTypes

  /**
   * LLM findUnique
   */
  export type LLMFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LLM
     */
    select?: LLMSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LLMInclude<ExtArgs> | null
    /**
     * Filter, which LLM to fetch.
     */
    where: LLMWhereUniqueInput
  }


  /**
   * LLM findUniqueOrThrow
   */
  export type LLMFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LLM
     */
    select?: LLMSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LLMInclude<ExtArgs> | null
    /**
     * Filter, which LLM to fetch.
     */
    where: LLMWhereUniqueInput
  }


  /**
   * LLM findFirst
   */
  export type LLMFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LLM
     */
    select?: LLMSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LLMInclude<ExtArgs> | null
    /**
     * Filter, which LLM to fetch.
     */
    where?: LLMWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LLMS to fetch.
     */
    orderBy?: LLMOrderByWithRelationInput | LLMOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LLMS.
     */
    cursor?: LLMWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LLMS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LLMS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LLMS.
     */
    distinct?: LLMScalarFieldEnum | LLMScalarFieldEnum[]
  }


  /**
   * LLM findFirstOrThrow
   */
  export type LLMFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LLM
     */
    select?: LLMSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LLMInclude<ExtArgs> | null
    /**
     * Filter, which LLM to fetch.
     */
    where?: LLMWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LLMS to fetch.
     */
    orderBy?: LLMOrderByWithRelationInput | LLMOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LLMS.
     */
    cursor?: LLMWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LLMS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LLMS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LLMS.
     */
    distinct?: LLMScalarFieldEnum | LLMScalarFieldEnum[]
  }


  /**
   * LLM findMany
   */
  export type LLMFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LLM
     */
    select?: LLMSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LLMInclude<ExtArgs> | null
    /**
     * Filter, which LLMS to fetch.
     */
    where?: LLMWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LLMS to fetch.
     */
    orderBy?: LLMOrderByWithRelationInput | LLMOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LLMS.
     */
    cursor?: LLMWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LLMS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LLMS.
     */
    skip?: number
    distinct?: LLMScalarFieldEnum | LLMScalarFieldEnum[]
  }


  /**
   * LLM create
   */
  export type LLMCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LLM
     */
    select?: LLMSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LLMInclude<ExtArgs> | null
    /**
     * The data needed to create a LLM.
     */
    data: XOR<LLMCreateInput, LLMUncheckedCreateInput>
  }


  /**
   * LLM createMany
   */
  export type LLMCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LLMS.
     */
    data: LLMCreateManyInput | LLMCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * LLM update
   */
  export type LLMUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LLM
     */
    select?: LLMSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LLMInclude<ExtArgs> | null
    /**
     * The data needed to update a LLM.
     */
    data: XOR<LLMUpdateInput, LLMUncheckedUpdateInput>
    /**
     * Choose, which LLM to update.
     */
    where: LLMWhereUniqueInput
  }


  /**
   * LLM updateMany
   */
  export type LLMUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LLMS.
     */
    data: XOR<LLMUpdateManyMutationInput, LLMUncheckedUpdateManyInput>
    /**
     * Filter which LLMS to update
     */
    where?: LLMWhereInput
  }


  /**
   * LLM upsert
   */
  export type LLMUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LLM
     */
    select?: LLMSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LLMInclude<ExtArgs> | null
    /**
     * The filter to search for the LLM to update in case it exists.
     */
    where: LLMWhereUniqueInput
    /**
     * In case the LLM found by the `where` argument doesn't exist, create a new LLM with this data.
     */
    create: XOR<LLMCreateInput, LLMUncheckedCreateInput>
    /**
     * In case the LLM was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LLMUpdateInput, LLMUncheckedUpdateInput>
  }


  /**
   * LLM delete
   */
  export type LLMDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LLM
     */
    select?: LLMSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LLMInclude<ExtArgs> | null
    /**
     * Filter which LLM to delete.
     */
    where: LLMWhereUniqueInput
  }


  /**
   * LLM deleteMany
   */
  export type LLMDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LLMS to delete
     */
    where?: LLMWhereInput
  }


  /**
   * LLM.Prompt
   */
  export type LLM$PromptArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prompt
     */
    select?: PromptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PromptInclude<ExtArgs> | null
    where?: PromptWhereInput
    orderBy?: PromptOrderByWithRelationInput | PromptOrderByWithRelationInput[]
    cursor?: PromptWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PromptScalarFieldEnum | PromptScalarFieldEnum[]
  }


  /**
   * LLM without action
   */
  export type LLMDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LLM
     */
    select?: LLMSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LLMInclude<ExtArgs> | null
  }



  /**
   * Model BookMarked
   */

  export type AggregateBookMarked = {
    _count: BookMarkedCountAggregateOutputType | null
    _min: BookMarkedMinAggregateOutputType | null
    _max: BookMarkedMaxAggregateOutputType | null
  }

  export type BookMarkedMinAggregateOutputType = {
    accountID: string | null
    promptID: string | null
  }

  export type BookMarkedMaxAggregateOutputType = {
    accountID: string | null
    promptID: string | null
  }

  export type BookMarkedCountAggregateOutputType = {
    accountID: number
    promptID: number
    _all: number
  }


  export type BookMarkedMinAggregateInputType = {
    accountID?: true
    promptID?: true
  }

  export type BookMarkedMaxAggregateInputType = {
    accountID?: true
    promptID?: true
  }

  export type BookMarkedCountAggregateInputType = {
    accountID?: true
    promptID?: true
    _all?: true
  }

  export type BookMarkedAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BookMarked to aggregate.
     */
    where?: BookMarkedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookMarkeds to fetch.
     */
    orderBy?: BookMarkedOrderByWithRelationInput | BookMarkedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BookMarkedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookMarkeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookMarkeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BookMarkeds
    **/
    _count?: true | BookMarkedCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookMarkedMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookMarkedMaxAggregateInputType
  }

  export type GetBookMarkedAggregateType<T extends BookMarkedAggregateArgs> = {
        [P in keyof T & keyof AggregateBookMarked]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBookMarked[P]>
      : GetScalarType<T[P], AggregateBookMarked[P]>
  }




  export type BookMarkedGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookMarkedWhereInput
    orderBy?: BookMarkedOrderByWithAggregationInput | BookMarkedOrderByWithAggregationInput[]
    by: BookMarkedScalarFieldEnum[] | BookMarkedScalarFieldEnum
    having?: BookMarkedScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookMarkedCountAggregateInputType | true
    _min?: BookMarkedMinAggregateInputType
    _max?: BookMarkedMaxAggregateInputType
  }

  export type BookMarkedGroupByOutputType = {
    accountID: string
    promptID: string
    _count: BookMarkedCountAggregateOutputType | null
    _min: BookMarkedMinAggregateOutputType | null
    _max: BookMarkedMaxAggregateOutputType | null
  }

  type GetBookMarkedGroupByPayload<T extends BookMarkedGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BookMarkedGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookMarkedGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookMarkedGroupByOutputType[P]>
            : GetScalarType<T[P], BookMarkedGroupByOutputType[P]>
        }
      >
    >


  export type BookMarkedSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    accountID?: boolean
    promptID?: boolean
    account?: boolean | AccountDefaultArgs<ExtArgs>
    prompt?: boolean | PromptDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bookMarked"]>

  export type BookMarkedSelectScalar = {
    accountID?: boolean
    promptID?: boolean
  }

  export type BookMarkedInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    account?: boolean | AccountDefaultArgs<ExtArgs>
    prompt?: boolean | PromptDefaultArgs<ExtArgs>
  }


  export type $BookMarkedPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BookMarked"
    objects: {
      account: Prisma.$AccountPayload<ExtArgs>
      prompt: Prisma.$PromptPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      accountID: string
      promptID: string
    }, ExtArgs["result"]["bookMarked"]>
    composites: {}
  }


  type BookMarkedGetPayload<S extends boolean | null | undefined | BookMarkedDefaultArgs> = $Result.GetResult<Prisma.$BookMarkedPayload, S>

  type BookMarkedCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BookMarkedFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BookMarkedCountAggregateInputType | true
    }

  export interface BookMarkedDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BookMarked'], meta: { name: 'BookMarked' } }
    /**
     * Find zero or one BookMarked that matches the filter.
     * @param {BookMarkedFindUniqueArgs} args - Arguments to find a BookMarked
     * @example
     * // Get one BookMarked
     * const bookMarked = await prisma.bookMarked.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BookMarkedFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BookMarkedFindUniqueArgs<ExtArgs>>
    ): Prisma__BookMarkedClient<$Result.GetResult<Prisma.$BookMarkedPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one BookMarked that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BookMarkedFindUniqueOrThrowArgs} args - Arguments to find a BookMarked
     * @example
     * // Get one BookMarked
     * const bookMarked = await prisma.bookMarked.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BookMarkedFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BookMarkedFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BookMarkedClient<$Result.GetResult<Prisma.$BookMarkedPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first BookMarked that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookMarkedFindFirstArgs} args - Arguments to find a BookMarked
     * @example
     * // Get one BookMarked
     * const bookMarked = await prisma.bookMarked.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BookMarkedFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BookMarkedFindFirstArgs<ExtArgs>>
    ): Prisma__BookMarkedClient<$Result.GetResult<Prisma.$BookMarkedPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first BookMarked that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookMarkedFindFirstOrThrowArgs} args - Arguments to find a BookMarked
     * @example
     * // Get one BookMarked
     * const bookMarked = await prisma.bookMarked.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BookMarkedFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BookMarkedFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BookMarkedClient<$Result.GetResult<Prisma.$BookMarkedPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more BookMarkeds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookMarkedFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BookMarkeds
     * const bookMarkeds = await prisma.bookMarked.findMany()
     * 
     * // Get first 10 BookMarkeds
     * const bookMarkeds = await prisma.bookMarked.findMany({ take: 10 })
     * 
     * // Only select the `accountID`
     * const bookMarkedWithAccountIDOnly = await prisma.bookMarked.findMany({ select: { accountID: true } })
     * 
    **/
    findMany<T extends BookMarkedFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BookMarkedFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookMarkedPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a BookMarked.
     * @param {BookMarkedCreateArgs} args - Arguments to create a BookMarked.
     * @example
     * // Create one BookMarked
     * const BookMarked = await prisma.bookMarked.create({
     *   data: {
     *     // ... data to create a BookMarked
     *   }
     * })
     * 
    **/
    create<T extends BookMarkedCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BookMarkedCreateArgs<ExtArgs>>
    ): Prisma__BookMarkedClient<$Result.GetResult<Prisma.$BookMarkedPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many BookMarkeds.
     *     @param {BookMarkedCreateManyArgs} args - Arguments to create many BookMarkeds.
     *     @example
     *     // Create many BookMarkeds
     *     const bookMarked = await prisma.bookMarked.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BookMarkedCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BookMarkedCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BookMarked.
     * @param {BookMarkedDeleteArgs} args - Arguments to delete one BookMarked.
     * @example
     * // Delete one BookMarked
     * const BookMarked = await prisma.bookMarked.delete({
     *   where: {
     *     // ... filter to delete one BookMarked
     *   }
     * })
     * 
    **/
    delete<T extends BookMarkedDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BookMarkedDeleteArgs<ExtArgs>>
    ): Prisma__BookMarkedClient<$Result.GetResult<Prisma.$BookMarkedPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one BookMarked.
     * @param {BookMarkedUpdateArgs} args - Arguments to update one BookMarked.
     * @example
     * // Update one BookMarked
     * const bookMarked = await prisma.bookMarked.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BookMarkedUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BookMarkedUpdateArgs<ExtArgs>>
    ): Prisma__BookMarkedClient<$Result.GetResult<Prisma.$BookMarkedPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more BookMarkeds.
     * @param {BookMarkedDeleteManyArgs} args - Arguments to filter BookMarkeds to delete.
     * @example
     * // Delete a few BookMarkeds
     * const { count } = await prisma.bookMarked.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BookMarkedDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BookMarkedDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BookMarkeds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookMarkedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BookMarkeds
     * const bookMarked = await prisma.bookMarked.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BookMarkedUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BookMarkedUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BookMarked.
     * @param {BookMarkedUpsertArgs} args - Arguments to update or create a BookMarked.
     * @example
     * // Update or create a BookMarked
     * const bookMarked = await prisma.bookMarked.upsert({
     *   create: {
     *     // ... data to create a BookMarked
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BookMarked we want to update
     *   }
     * })
    **/
    upsert<T extends BookMarkedUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BookMarkedUpsertArgs<ExtArgs>>
    ): Prisma__BookMarkedClient<$Result.GetResult<Prisma.$BookMarkedPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of BookMarkeds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookMarkedCountArgs} args - Arguments to filter BookMarkeds to count.
     * @example
     * // Count the number of BookMarkeds
     * const count = await prisma.bookMarked.count({
     *   where: {
     *     // ... the filter for the BookMarkeds we want to count
     *   }
     * })
    **/
    count<T extends BookMarkedCountArgs>(
      args?: Subset<T, BookMarkedCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookMarkedCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BookMarked.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookMarkedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookMarkedAggregateArgs>(args: Subset<T, BookMarkedAggregateArgs>): Prisma.PrismaPromise<GetBookMarkedAggregateType<T>>

    /**
     * Group by BookMarked.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookMarkedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookMarkedGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookMarkedGroupByArgs['orderBy'] }
        : { orderBy?: BookMarkedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookMarkedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookMarkedGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BookMarked model
   */
  readonly fields: BookMarkedFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BookMarked.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BookMarkedClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    account<T extends AccountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AccountDefaultArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    prompt<T extends PromptDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PromptDefaultArgs<ExtArgs>>): Prisma__PromptClient<$Result.GetResult<Prisma.$PromptPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the BookMarked model
   */ 
  interface BookMarkedFieldRefs {
    readonly accountID: FieldRef<"BookMarked", 'String'>
    readonly promptID: FieldRef<"BookMarked", 'String'>
  }
    

  // Custom InputTypes

  /**
   * BookMarked findUnique
   */
  export type BookMarkedFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookMarked
     */
    select?: BookMarkedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookMarkedInclude<ExtArgs> | null
    /**
     * Filter, which BookMarked to fetch.
     */
    where: BookMarkedWhereUniqueInput
  }


  /**
   * BookMarked findUniqueOrThrow
   */
  export type BookMarkedFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookMarked
     */
    select?: BookMarkedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookMarkedInclude<ExtArgs> | null
    /**
     * Filter, which BookMarked to fetch.
     */
    where: BookMarkedWhereUniqueInput
  }


  /**
   * BookMarked findFirst
   */
  export type BookMarkedFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookMarked
     */
    select?: BookMarkedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookMarkedInclude<ExtArgs> | null
    /**
     * Filter, which BookMarked to fetch.
     */
    where?: BookMarkedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookMarkeds to fetch.
     */
    orderBy?: BookMarkedOrderByWithRelationInput | BookMarkedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BookMarkeds.
     */
    cursor?: BookMarkedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookMarkeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookMarkeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BookMarkeds.
     */
    distinct?: BookMarkedScalarFieldEnum | BookMarkedScalarFieldEnum[]
  }


  /**
   * BookMarked findFirstOrThrow
   */
  export type BookMarkedFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookMarked
     */
    select?: BookMarkedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookMarkedInclude<ExtArgs> | null
    /**
     * Filter, which BookMarked to fetch.
     */
    where?: BookMarkedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookMarkeds to fetch.
     */
    orderBy?: BookMarkedOrderByWithRelationInput | BookMarkedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BookMarkeds.
     */
    cursor?: BookMarkedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookMarkeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookMarkeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BookMarkeds.
     */
    distinct?: BookMarkedScalarFieldEnum | BookMarkedScalarFieldEnum[]
  }


  /**
   * BookMarked findMany
   */
  export type BookMarkedFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookMarked
     */
    select?: BookMarkedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookMarkedInclude<ExtArgs> | null
    /**
     * Filter, which BookMarkeds to fetch.
     */
    where?: BookMarkedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookMarkeds to fetch.
     */
    orderBy?: BookMarkedOrderByWithRelationInput | BookMarkedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BookMarkeds.
     */
    cursor?: BookMarkedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookMarkeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookMarkeds.
     */
    skip?: number
    distinct?: BookMarkedScalarFieldEnum | BookMarkedScalarFieldEnum[]
  }


  /**
   * BookMarked create
   */
  export type BookMarkedCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookMarked
     */
    select?: BookMarkedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookMarkedInclude<ExtArgs> | null
    /**
     * The data needed to create a BookMarked.
     */
    data: XOR<BookMarkedCreateInput, BookMarkedUncheckedCreateInput>
  }


  /**
   * BookMarked createMany
   */
  export type BookMarkedCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BookMarkeds.
     */
    data: BookMarkedCreateManyInput | BookMarkedCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * BookMarked update
   */
  export type BookMarkedUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookMarked
     */
    select?: BookMarkedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookMarkedInclude<ExtArgs> | null
    /**
     * The data needed to update a BookMarked.
     */
    data: XOR<BookMarkedUpdateInput, BookMarkedUncheckedUpdateInput>
    /**
     * Choose, which BookMarked to update.
     */
    where: BookMarkedWhereUniqueInput
  }


  /**
   * BookMarked updateMany
   */
  export type BookMarkedUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BookMarkeds.
     */
    data: XOR<BookMarkedUpdateManyMutationInput, BookMarkedUncheckedUpdateManyInput>
    /**
     * Filter which BookMarkeds to update
     */
    where?: BookMarkedWhereInput
  }


  /**
   * BookMarked upsert
   */
  export type BookMarkedUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookMarked
     */
    select?: BookMarkedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookMarkedInclude<ExtArgs> | null
    /**
     * The filter to search for the BookMarked to update in case it exists.
     */
    where: BookMarkedWhereUniqueInput
    /**
     * In case the BookMarked found by the `where` argument doesn't exist, create a new BookMarked with this data.
     */
    create: XOR<BookMarkedCreateInput, BookMarkedUncheckedCreateInput>
    /**
     * In case the BookMarked was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BookMarkedUpdateInput, BookMarkedUncheckedUpdateInput>
  }


  /**
   * BookMarked delete
   */
  export type BookMarkedDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookMarked
     */
    select?: BookMarkedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookMarkedInclude<ExtArgs> | null
    /**
     * Filter which BookMarked to delete.
     */
    where: BookMarkedWhereUniqueInput
  }


  /**
   * BookMarked deleteMany
   */
  export type BookMarkedDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BookMarkeds to delete
     */
    where?: BookMarkedWhereInput
  }


  /**
   * BookMarked without action
   */
  export type BookMarkedDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookMarked
     */
    select?: BookMarkedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookMarkedInclude<ExtArgs> | null
  }



  /**
   * Model HasTag
   */

  export type AggregateHasTag = {
    _count: HasTagCountAggregateOutputType | null
    _min: HasTagMinAggregateOutputType | null
    _max: HasTagMaxAggregateOutputType | null
  }

  export type HasTagMinAggregateOutputType = {
    tagName: string | null
    promptID: string | null
  }

  export type HasTagMaxAggregateOutputType = {
    tagName: string | null
    promptID: string | null
  }

  export type HasTagCountAggregateOutputType = {
    tagName: number
    promptID: number
    _all: number
  }


  export type HasTagMinAggregateInputType = {
    tagName?: true
    promptID?: true
  }

  export type HasTagMaxAggregateInputType = {
    tagName?: true
    promptID?: true
  }

  export type HasTagCountAggregateInputType = {
    tagName?: true
    promptID?: true
    _all?: true
  }

  export type HasTagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HasTag to aggregate.
     */
    where?: HasTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HasTags to fetch.
     */
    orderBy?: HasTagOrderByWithRelationInput | HasTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HasTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HasTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HasTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HasTags
    **/
    _count?: true | HasTagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HasTagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HasTagMaxAggregateInputType
  }

  export type GetHasTagAggregateType<T extends HasTagAggregateArgs> = {
        [P in keyof T & keyof AggregateHasTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHasTag[P]>
      : GetScalarType<T[P], AggregateHasTag[P]>
  }




  export type HasTagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HasTagWhereInput
    orderBy?: HasTagOrderByWithAggregationInput | HasTagOrderByWithAggregationInput[]
    by: HasTagScalarFieldEnum[] | HasTagScalarFieldEnum
    having?: HasTagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HasTagCountAggregateInputType | true
    _min?: HasTagMinAggregateInputType
    _max?: HasTagMaxAggregateInputType
  }

  export type HasTagGroupByOutputType = {
    tagName: string
    promptID: string
    _count: HasTagCountAggregateOutputType | null
    _min: HasTagMinAggregateOutputType | null
    _max: HasTagMaxAggregateOutputType | null
  }

  type GetHasTagGroupByPayload<T extends HasTagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HasTagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HasTagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HasTagGroupByOutputType[P]>
            : GetScalarType<T[P], HasTagGroupByOutputType[P]>
        }
      >
    >


  export type HasTagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tagName?: boolean
    promptID?: boolean
    prompt?: boolean | PromptDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["hasTag"]>

  export type HasTagSelectScalar = {
    tagName?: boolean
    promptID?: boolean
  }

  export type HasTagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    prompt?: boolean | PromptDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }


  export type $HasTagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HasTag"
    objects: {
      prompt: Prisma.$PromptPayload<ExtArgs>
      tag: Prisma.$TagPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      tagName: string
      promptID: string
    }, ExtArgs["result"]["hasTag"]>
    composites: {}
  }


  type HasTagGetPayload<S extends boolean | null | undefined | HasTagDefaultArgs> = $Result.GetResult<Prisma.$HasTagPayload, S>

  type HasTagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HasTagFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HasTagCountAggregateInputType | true
    }

  export interface HasTagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HasTag'], meta: { name: 'HasTag' } }
    /**
     * Find zero or one HasTag that matches the filter.
     * @param {HasTagFindUniqueArgs} args - Arguments to find a HasTag
     * @example
     * // Get one HasTag
     * const hasTag = await prisma.hasTag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HasTagFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, HasTagFindUniqueArgs<ExtArgs>>
    ): Prisma__HasTagClient<$Result.GetResult<Prisma.$HasTagPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one HasTag that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {HasTagFindUniqueOrThrowArgs} args - Arguments to find a HasTag
     * @example
     * // Get one HasTag
     * const hasTag = await prisma.hasTag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends HasTagFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HasTagFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__HasTagClient<$Result.GetResult<Prisma.$HasTagPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first HasTag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HasTagFindFirstArgs} args - Arguments to find a HasTag
     * @example
     * // Get one HasTag
     * const hasTag = await prisma.hasTag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HasTagFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, HasTagFindFirstArgs<ExtArgs>>
    ): Prisma__HasTagClient<$Result.GetResult<Prisma.$HasTagPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first HasTag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HasTagFindFirstOrThrowArgs} args - Arguments to find a HasTag
     * @example
     * // Get one HasTag
     * const hasTag = await prisma.hasTag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends HasTagFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HasTagFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__HasTagClient<$Result.GetResult<Prisma.$HasTagPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more HasTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HasTagFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HasTags
     * const hasTags = await prisma.hasTag.findMany()
     * 
     * // Get first 10 HasTags
     * const hasTags = await prisma.hasTag.findMany({ take: 10 })
     * 
     * // Only select the `tagName`
     * const hasTagWithTagNameOnly = await prisma.hasTag.findMany({ select: { tagName: true } })
     * 
    **/
    findMany<T extends HasTagFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HasTagFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HasTagPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a HasTag.
     * @param {HasTagCreateArgs} args - Arguments to create a HasTag.
     * @example
     * // Create one HasTag
     * const HasTag = await prisma.hasTag.create({
     *   data: {
     *     // ... data to create a HasTag
     *   }
     * })
     * 
    **/
    create<T extends HasTagCreateArgs<ExtArgs>>(
      args: SelectSubset<T, HasTagCreateArgs<ExtArgs>>
    ): Prisma__HasTagClient<$Result.GetResult<Prisma.$HasTagPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many HasTags.
     *     @param {HasTagCreateManyArgs} args - Arguments to create many HasTags.
     *     @example
     *     // Create many HasTags
     *     const hasTag = await prisma.hasTag.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends HasTagCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HasTagCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a HasTag.
     * @param {HasTagDeleteArgs} args - Arguments to delete one HasTag.
     * @example
     * // Delete one HasTag
     * const HasTag = await prisma.hasTag.delete({
     *   where: {
     *     // ... filter to delete one HasTag
     *   }
     * })
     * 
    **/
    delete<T extends HasTagDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, HasTagDeleteArgs<ExtArgs>>
    ): Prisma__HasTagClient<$Result.GetResult<Prisma.$HasTagPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one HasTag.
     * @param {HasTagUpdateArgs} args - Arguments to update one HasTag.
     * @example
     * // Update one HasTag
     * const hasTag = await prisma.hasTag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HasTagUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, HasTagUpdateArgs<ExtArgs>>
    ): Prisma__HasTagClient<$Result.GetResult<Prisma.$HasTagPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more HasTags.
     * @param {HasTagDeleteManyArgs} args - Arguments to filter HasTags to delete.
     * @example
     * // Delete a few HasTags
     * const { count } = await prisma.hasTag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HasTagDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HasTagDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HasTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HasTagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HasTags
     * const hasTag = await prisma.hasTag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HasTagUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, HasTagUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one HasTag.
     * @param {HasTagUpsertArgs} args - Arguments to update or create a HasTag.
     * @example
     * // Update or create a HasTag
     * const hasTag = await prisma.hasTag.upsert({
     *   create: {
     *     // ... data to create a HasTag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HasTag we want to update
     *   }
     * })
    **/
    upsert<T extends HasTagUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, HasTagUpsertArgs<ExtArgs>>
    ): Prisma__HasTagClient<$Result.GetResult<Prisma.$HasTagPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of HasTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HasTagCountArgs} args - Arguments to filter HasTags to count.
     * @example
     * // Count the number of HasTags
     * const count = await prisma.hasTag.count({
     *   where: {
     *     // ... the filter for the HasTags we want to count
     *   }
     * })
    **/
    count<T extends HasTagCountArgs>(
      args?: Subset<T, HasTagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HasTagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HasTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HasTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HasTagAggregateArgs>(args: Subset<T, HasTagAggregateArgs>): Prisma.PrismaPromise<GetHasTagAggregateType<T>>

    /**
     * Group by HasTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HasTagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HasTagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HasTagGroupByArgs['orderBy'] }
        : { orderBy?: HasTagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HasTagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHasTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HasTag model
   */
  readonly fields: HasTagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HasTag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HasTagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    prompt<T extends PromptDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PromptDefaultArgs<ExtArgs>>): Prisma__PromptClient<$Result.GetResult<Prisma.$PromptPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    tag<T extends TagDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TagDefaultArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the HasTag model
   */ 
  interface HasTagFieldRefs {
    readonly tagName: FieldRef<"HasTag", 'String'>
    readonly promptID: FieldRef<"HasTag", 'String'>
  }
    

  // Custom InputTypes

  /**
   * HasTag findUnique
   */
  export type HasTagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HasTag
     */
    select?: HasTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HasTagInclude<ExtArgs> | null
    /**
     * Filter, which HasTag to fetch.
     */
    where: HasTagWhereUniqueInput
  }


  /**
   * HasTag findUniqueOrThrow
   */
  export type HasTagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HasTag
     */
    select?: HasTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HasTagInclude<ExtArgs> | null
    /**
     * Filter, which HasTag to fetch.
     */
    where: HasTagWhereUniqueInput
  }


  /**
   * HasTag findFirst
   */
  export type HasTagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HasTag
     */
    select?: HasTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HasTagInclude<ExtArgs> | null
    /**
     * Filter, which HasTag to fetch.
     */
    where?: HasTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HasTags to fetch.
     */
    orderBy?: HasTagOrderByWithRelationInput | HasTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HasTags.
     */
    cursor?: HasTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HasTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HasTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HasTags.
     */
    distinct?: HasTagScalarFieldEnum | HasTagScalarFieldEnum[]
  }


  /**
   * HasTag findFirstOrThrow
   */
  export type HasTagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HasTag
     */
    select?: HasTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HasTagInclude<ExtArgs> | null
    /**
     * Filter, which HasTag to fetch.
     */
    where?: HasTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HasTags to fetch.
     */
    orderBy?: HasTagOrderByWithRelationInput | HasTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HasTags.
     */
    cursor?: HasTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HasTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HasTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HasTags.
     */
    distinct?: HasTagScalarFieldEnum | HasTagScalarFieldEnum[]
  }


  /**
   * HasTag findMany
   */
  export type HasTagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HasTag
     */
    select?: HasTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HasTagInclude<ExtArgs> | null
    /**
     * Filter, which HasTags to fetch.
     */
    where?: HasTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HasTags to fetch.
     */
    orderBy?: HasTagOrderByWithRelationInput | HasTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HasTags.
     */
    cursor?: HasTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HasTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HasTags.
     */
    skip?: number
    distinct?: HasTagScalarFieldEnum | HasTagScalarFieldEnum[]
  }


  /**
   * HasTag create
   */
  export type HasTagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HasTag
     */
    select?: HasTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HasTagInclude<ExtArgs> | null
    /**
     * The data needed to create a HasTag.
     */
    data: XOR<HasTagCreateInput, HasTagUncheckedCreateInput>
  }


  /**
   * HasTag createMany
   */
  export type HasTagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HasTags.
     */
    data: HasTagCreateManyInput | HasTagCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * HasTag update
   */
  export type HasTagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HasTag
     */
    select?: HasTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HasTagInclude<ExtArgs> | null
    /**
     * The data needed to update a HasTag.
     */
    data: XOR<HasTagUpdateInput, HasTagUncheckedUpdateInput>
    /**
     * Choose, which HasTag to update.
     */
    where: HasTagWhereUniqueInput
  }


  /**
   * HasTag updateMany
   */
  export type HasTagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HasTags.
     */
    data: XOR<HasTagUpdateManyMutationInput, HasTagUncheckedUpdateManyInput>
    /**
     * Filter which HasTags to update
     */
    where?: HasTagWhereInput
  }


  /**
   * HasTag upsert
   */
  export type HasTagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HasTag
     */
    select?: HasTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HasTagInclude<ExtArgs> | null
    /**
     * The filter to search for the HasTag to update in case it exists.
     */
    where: HasTagWhereUniqueInput
    /**
     * In case the HasTag found by the `where` argument doesn't exist, create a new HasTag with this data.
     */
    create: XOR<HasTagCreateInput, HasTagUncheckedCreateInput>
    /**
     * In case the HasTag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HasTagUpdateInput, HasTagUncheckedUpdateInput>
  }


  /**
   * HasTag delete
   */
  export type HasTagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HasTag
     */
    select?: HasTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HasTagInclude<ExtArgs> | null
    /**
     * Filter which HasTag to delete.
     */
    where: HasTagWhereUniqueInput
  }


  /**
   * HasTag deleteMany
   */
  export type HasTagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HasTags to delete
     */
    where?: HasTagWhereInput
  }


  /**
   * HasTag without action
   */
  export type HasTagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HasTag
     */
    select?: HasTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HasTagInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const PromptScalarFieldEnum: {
    id: 'id',
    prompt: 'prompt',
    response: 'response',
    image: 'image',
    rating: 'rating',
    approved: 'approved',
    llmName: 'llmName',
    createdAt: 'createdAt'
  };

  export type PromptScalarFieldEnum = (typeof PromptScalarFieldEnum)[keyof typeof PromptScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    isModerator: 'isModerator'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const TagScalarFieldEnum: {
    name: 'name'
  };

  export type TagScalarFieldEnum = (typeof TagScalarFieldEnum)[keyof typeof TagScalarFieldEnum]


  export const LLMScalarFieldEnum: {
    llmName: 'llmName'
  };

  export type LLMScalarFieldEnum = (typeof LLMScalarFieldEnum)[keyof typeof LLMScalarFieldEnum]


  export const BookMarkedScalarFieldEnum: {
    accountID: 'accountID',
    promptID: 'promptID'
  };

  export type BookMarkedScalarFieldEnum = (typeof BookMarkedScalarFieldEnum)[keyof typeof BookMarkedScalarFieldEnum]


  export const HasTagScalarFieldEnum: {
    tagName: 'tagName',
    promptID: 'promptID'
  };

  export type HasTagScalarFieldEnum = (typeof HasTagScalarFieldEnum)[keyof typeof HasTagScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type PromptWhereInput = {
    AND?: PromptWhereInput | PromptWhereInput[]
    OR?: PromptWhereInput[]
    NOT?: PromptWhereInput | PromptWhereInput[]
    id?: StringFilter<"Prompt"> | string
    prompt?: StringFilter<"Prompt"> | string
    response?: StringFilter<"Prompt"> | string
    image?: StringFilter<"Prompt"> | string
    rating?: FloatFilter<"Prompt"> | number
    approved?: BoolFilter<"Prompt"> | boolean
    llmName?: StringFilter<"Prompt"> | string
    createdAt?: DateTimeFilter<"Prompt"> | Date | string
    hasTag?: HasTagListRelationFilter
    BookMarked?: BookMarkedListRelationFilter
    llm?: XOR<LLMRelationFilter, LLMWhereInput>
  }

  export type PromptOrderByWithRelationInput = {
    id?: SortOrder
    prompt?: SortOrder
    response?: SortOrder
    image?: SortOrder
    rating?: SortOrder
    approved?: SortOrder
    llmName?: SortOrder
    createdAt?: SortOrder
    hasTag?: HasTagOrderByRelationAggregateInput
    BookMarked?: BookMarkedOrderByRelationAggregateInput
    llm?: LLMOrderByWithRelationInput
  }

  export type PromptWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PromptWhereInput | PromptWhereInput[]
    OR?: PromptWhereInput[]
    NOT?: PromptWhereInput | PromptWhereInput[]
    prompt?: StringFilter<"Prompt"> | string
    response?: StringFilter<"Prompt"> | string
    image?: StringFilter<"Prompt"> | string
    rating?: FloatFilter<"Prompt"> | number
    approved?: BoolFilter<"Prompt"> | boolean
    llmName?: StringFilter<"Prompt"> | string
    createdAt?: DateTimeFilter<"Prompt"> | Date | string
    hasTag?: HasTagListRelationFilter
    BookMarked?: BookMarkedListRelationFilter
    llm?: XOR<LLMRelationFilter, LLMWhereInput>
  }, "id">

  export type PromptOrderByWithAggregationInput = {
    id?: SortOrder
    prompt?: SortOrder
    response?: SortOrder
    image?: SortOrder
    rating?: SortOrder
    approved?: SortOrder
    llmName?: SortOrder
    createdAt?: SortOrder
    _count?: PromptCountOrderByAggregateInput
    _avg?: PromptAvgOrderByAggregateInput
    _max?: PromptMaxOrderByAggregateInput
    _min?: PromptMinOrderByAggregateInput
    _sum?: PromptSumOrderByAggregateInput
  }

  export type PromptScalarWhereWithAggregatesInput = {
    AND?: PromptScalarWhereWithAggregatesInput | PromptScalarWhereWithAggregatesInput[]
    OR?: PromptScalarWhereWithAggregatesInput[]
    NOT?: PromptScalarWhereWithAggregatesInput | PromptScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Prompt"> | string
    prompt?: StringWithAggregatesFilter<"Prompt"> | string
    response?: StringWithAggregatesFilter<"Prompt"> | string
    image?: StringWithAggregatesFilter<"Prompt"> | string
    rating?: FloatWithAggregatesFilter<"Prompt"> | number
    approved?: BoolWithAggregatesFilter<"Prompt"> | boolean
    llmName?: StringWithAggregatesFilter<"Prompt"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Prompt"> | Date | string
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    isModerator?: BoolFilter<"Account"> | boolean
    bookMarked?: BookMarkedListRelationFilter
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    isModerator?: SortOrder
    bookMarked?: BookMarkedOrderByRelationAggregateInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    isModerator?: BoolFilter<"Account"> | boolean
    bookMarked?: BookMarkedListRelationFilter
  }, "id">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    isModerator?: SortOrder
    _count?: AccountCountOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    isModerator?: BoolWithAggregatesFilter<"Account"> | boolean
  }

  export type TagWhereInput = {
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    name?: StringFilter<"Tag"> | string
    HasTag?: HasTagListRelationFilter
  }

  export type TagOrderByWithRelationInput = {
    name?: SortOrder
    HasTag?: HasTagOrderByRelationAggregateInput
  }

  export type TagWhereUniqueInput = Prisma.AtLeast<{
    name?: string
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    HasTag?: HasTagListRelationFilter
  }, "name">

  export type TagOrderByWithAggregationInput = {
    name?: SortOrder
    _count?: TagCountOrderByAggregateInput
    _max?: TagMaxOrderByAggregateInput
    _min?: TagMinOrderByAggregateInput
  }

  export type TagScalarWhereWithAggregatesInput = {
    AND?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    OR?: TagScalarWhereWithAggregatesInput[]
    NOT?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    name?: StringWithAggregatesFilter<"Tag"> | string
  }

  export type LLMWhereInput = {
    AND?: LLMWhereInput | LLMWhereInput[]
    OR?: LLMWhereInput[]
    NOT?: LLMWhereInput | LLMWhereInput[]
    llmName?: StringFilter<"LLM"> | string
    Prompt?: PromptListRelationFilter
  }

  export type LLMOrderByWithRelationInput = {
    llmName?: SortOrder
    Prompt?: PromptOrderByRelationAggregateInput
  }

  export type LLMWhereUniqueInput = Prisma.AtLeast<{
    llmName?: string
    AND?: LLMWhereInput | LLMWhereInput[]
    OR?: LLMWhereInput[]
    NOT?: LLMWhereInput | LLMWhereInput[]
    Prompt?: PromptListRelationFilter
  }, "llmName">

  export type LLMOrderByWithAggregationInput = {
    llmName?: SortOrder
    _count?: LLMCountOrderByAggregateInput
    _max?: LLMMaxOrderByAggregateInput
    _min?: LLMMinOrderByAggregateInput
  }

  export type LLMScalarWhereWithAggregatesInput = {
    AND?: LLMScalarWhereWithAggregatesInput | LLMScalarWhereWithAggregatesInput[]
    OR?: LLMScalarWhereWithAggregatesInput[]
    NOT?: LLMScalarWhereWithAggregatesInput | LLMScalarWhereWithAggregatesInput[]
    llmName?: StringWithAggregatesFilter<"LLM"> | string
  }

  export type BookMarkedWhereInput = {
    AND?: BookMarkedWhereInput | BookMarkedWhereInput[]
    OR?: BookMarkedWhereInput[]
    NOT?: BookMarkedWhereInput | BookMarkedWhereInput[]
    accountID?: StringFilter<"BookMarked"> | string
    promptID?: StringFilter<"BookMarked"> | string
    account?: XOR<AccountRelationFilter, AccountWhereInput>
    prompt?: XOR<PromptRelationFilter, PromptWhereInput>
  }

  export type BookMarkedOrderByWithRelationInput = {
    accountID?: SortOrder
    promptID?: SortOrder
    account?: AccountOrderByWithRelationInput
    prompt?: PromptOrderByWithRelationInput
  }

  export type BookMarkedWhereUniqueInput = Prisma.AtLeast<{
    accountID?: string
    AND?: BookMarkedWhereInput | BookMarkedWhereInput[]
    OR?: BookMarkedWhereInput[]
    NOT?: BookMarkedWhereInput | BookMarkedWhereInput[]
    promptID?: StringFilter<"BookMarked"> | string
    account?: XOR<AccountRelationFilter, AccountWhereInput>
    prompt?: XOR<PromptRelationFilter, PromptWhereInput>
  }, "accountID">

  export type BookMarkedOrderByWithAggregationInput = {
    accountID?: SortOrder
    promptID?: SortOrder
    _count?: BookMarkedCountOrderByAggregateInput
    _max?: BookMarkedMaxOrderByAggregateInput
    _min?: BookMarkedMinOrderByAggregateInput
  }

  export type BookMarkedScalarWhereWithAggregatesInput = {
    AND?: BookMarkedScalarWhereWithAggregatesInput | BookMarkedScalarWhereWithAggregatesInput[]
    OR?: BookMarkedScalarWhereWithAggregatesInput[]
    NOT?: BookMarkedScalarWhereWithAggregatesInput | BookMarkedScalarWhereWithAggregatesInput[]
    accountID?: StringWithAggregatesFilter<"BookMarked"> | string
    promptID?: StringWithAggregatesFilter<"BookMarked"> | string
  }

  export type HasTagWhereInput = {
    AND?: HasTagWhereInput | HasTagWhereInput[]
    OR?: HasTagWhereInput[]
    NOT?: HasTagWhereInput | HasTagWhereInput[]
    tagName?: StringFilter<"HasTag"> | string
    promptID?: StringFilter<"HasTag"> | string
    prompt?: XOR<PromptRelationFilter, PromptWhereInput>
    tag?: XOR<TagRelationFilter, TagWhereInput>
  }

  export type HasTagOrderByWithRelationInput = {
    tagName?: SortOrder
    promptID?: SortOrder
    prompt?: PromptOrderByWithRelationInput
    tag?: TagOrderByWithRelationInput
  }

  export type HasTagWhereUniqueInput = Prisma.AtLeast<{
    tagName?: string
    AND?: HasTagWhereInput | HasTagWhereInput[]
    OR?: HasTagWhereInput[]
    NOT?: HasTagWhereInput | HasTagWhereInput[]
    promptID?: StringFilter<"HasTag"> | string
    prompt?: XOR<PromptRelationFilter, PromptWhereInput>
    tag?: XOR<TagRelationFilter, TagWhereInput>
  }, "tagName">

  export type HasTagOrderByWithAggregationInput = {
    tagName?: SortOrder
    promptID?: SortOrder
    _count?: HasTagCountOrderByAggregateInput
    _max?: HasTagMaxOrderByAggregateInput
    _min?: HasTagMinOrderByAggregateInput
  }

  export type HasTagScalarWhereWithAggregatesInput = {
    AND?: HasTagScalarWhereWithAggregatesInput | HasTagScalarWhereWithAggregatesInput[]
    OR?: HasTagScalarWhereWithAggregatesInput[]
    NOT?: HasTagScalarWhereWithAggregatesInput | HasTagScalarWhereWithAggregatesInput[]
    tagName?: StringWithAggregatesFilter<"HasTag"> | string
    promptID?: StringWithAggregatesFilter<"HasTag"> | string
  }

  export type PromptCreateInput = {
    id?: string
    prompt: string
    response: string
    image: string
    rating: number
    approved: boolean
    createdAt?: Date | string
    hasTag?: HasTagCreateNestedManyWithoutPromptInput
    BookMarked?: BookMarkedCreateNestedManyWithoutPromptInput
    llm: LLMCreateNestedOneWithoutPromptInput
  }

  export type PromptUncheckedCreateInput = {
    id?: string
    prompt: string
    response: string
    image: string
    rating: number
    approved: boolean
    llmName: string
    createdAt?: Date | string
    hasTag?: HasTagUncheckedCreateNestedManyWithoutPromptInput
    BookMarked?: BookMarkedUncheckedCreateNestedManyWithoutPromptInput
  }

  export type PromptUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    approved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hasTag?: HasTagUpdateManyWithoutPromptNestedInput
    BookMarked?: BookMarkedUpdateManyWithoutPromptNestedInput
    llm?: LLMUpdateOneRequiredWithoutPromptNestedInput
  }

  export type PromptUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    approved?: BoolFieldUpdateOperationsInput | boolean
    llmName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hasTag?: HasTagUncheckedUpdateManyWithoutPromptNestedInput
    BookMarked?: BookMarkedUncheckedUpdateManyWithoutPromptNestedInput
  }

  export type PromptCreateManyInput = {
    id?: string
    prompt: string
    response: string
    image: string
    rating: number
    approved: boolean
    llmName: string
    createdAt?: Date | string
  }

  export type PromptUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    approved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PromptUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    approved?: BoolFieldUpdateOperationsInput | boolean
    llmName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateInput = {
    id?: string
    isModerator: boolean
    bookMarked?: BookMarkedCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    isModerator: boolean
    bookMarked?: BookMarkedUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    isModerator?: BoolFieldUpdateOperationsInput | boolean
    bookMarked?: BookMarkedUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    isModerator?: BoolFieldUpdateOperationsInput | boolean
    bookMarked?: BookMarkedUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type AccountCreateManyInput = {
    id?: string
    isModerator: boolean
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    isModerator?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    isModerator?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TagCreateInput = {
    name: string
    HasTag?: HasTagCreateNestedManyWithoutTagInput
  }

  export type TagUncheckedCreateInput = {
    name: string
    HasTag?: HasTagUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    HasTag?: HasTagUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    HasTag?: HasTagUncheckedUpdateManyWithoutTagNestedInput
  }

  export type TagCreateManyInput = {
    name: string
  }

  export type TagUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TagUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type LLMCreateInput = {
    llmName: string
    Prompt?: PromptCreateNestedManyWithoutLlmInput
  }

  export type LLMUncheckedCreateInput = {
    llmName: string
    Prompt?: PromptUncheckedCreateNestedManyWithoutLlmInput
  }

  export type LLMUpdateInput = {
    llmName?: StringFieldUpdateOperationsInput | string
    Prompt?: PromptUpdateManyWithoutLlmNestedInput
  }

  export type LLMUncheckedUpdateInput = {
    llmName?: StringFieldUpdateOperationsInput | string
    Prompt?: PromptUncheckedUpdateManyWithoutLlmNestedInput
  }

  export type LLMCreateManyInput = {
    llmName: string
  }

  export type LLMUpdateManyMutationInput = {
    llmName?: StringFieldUpdateOperationsInput | string
  }

  export type LLMUncheckedUpdateManyInput = {
    llmName?: StringFieldUpdateOperationsInput | string
  }

  export type BookMarkedCreateInput = {
    account: AccountCreateNestedOneWithoutBookMarkedInput
    prompt: PromptCreateNestedOneWithoutBookMarkedInput
  }

  export type BookMarkedUncheckedCreateInput = {
    accountID: string
    promptID: string
  }

  export type BookMarkedUpdateInput = {
    account?: AccountUpdateOneRequiredWithoutBookMarkedNestedInput
    prompt?: PromptUpdateOneRequiredWithoutBookMarkedNestedInput
  }

  export type BookMarkedUncheckedUpdateInput = {
    accountID?: StringFieldUpdateOperationsInput | string
    promptID?: StringFieldUpdateOperationsInput | string
  }

  export type BookMarkedCreateManyInput = {
    accountID: string
    promptID: string
  }

  export type BookMarkedUpdateManyMutationInput = {

  }

  export type BookMarkedUncheckedUpdateManyInput = {
    accountID?: StringFieldUpdateOperationsInput | string
    promptID?: StringFieldUpdateOperationsInput | string
  }

  export type HasTagCreateInput = {
    prompt: PromptCreateNestedOneWithoutHasTagInput
    tag: TagCreateNestedOneWithoutHasTagInput
  }

  export type HasTagUncheckedCreateInput = {
    tagName: string
    promptID: string
  }

  export type HasTagUpdateInput = {
    prompt?: PromptUpdateOneRequiredWithoutHasTagNestedInput
    tag?: TagUpdateOneRequiredWithoutHasTagNestedInput
  }

  export type HasTagUncheckedUpdateInput = {
    tagName?: StringFieldUpdateOperationsInput | string
    promptID?: StringFieldUpdateOperationsInput | string
  }

  export type HasTagCreateManyInput = {
    tagName: string
    promptID: string
  }

  export type HasTagUpdateManyMutationInput = {

  }

  export type HasTagUncheckedUpdateManyInput = {
    tagName?: StringFieldUpdateOperationsInput | string
    promptID?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type HasTagListRelationFilter = {
    every?: HasTagWhereInput
    some?: HasTagWhereInput
    none?: HasTagWhereInput
  }

  export type BookMarkedListRelationFilter = {
    every?: BookMarkedWhereInput
    some?: BookMarkedWhereInput
    none?: BookMarkedWhereInput
  }

  export type LLMRelationFilter = {
    is?: LLMWhereInput
    isNot?: LLMWhereInput
  }

  export type HasTagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BookMarkedOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PromptCountOrderByAggregateInput = {
    id?: SortOrder
    prompt?: SortOrder
    response?: SortOrder
    image?: SortOrder
    rating?: SortOrder
    approved?: SortOrder
    llmName?: SortOrder
    createdAt?: SortOrder
  }

  export type PromptAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type PromptMaxOrderByAggregateInput = {
    id?: SortOrder
    prompt?: SortOrder
    response?: SortOrder
    image?: SortOrder
    rating?: SortOrder
    approved?: SortOrder
    llmName?: SortOrder
    createdAt?: SortOrder
  }

  export type PromptMinOrderByAggregateInput = {
    id?: SortOrder
    prompt?: SortOrder
    response?: SortOrder
    image?: SortOrder
    rating?: SortOrder
    approved?: SortOrder
    llmName?: SortOrder
    createdAt?: SortOrder
  }

  export type PromptSumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    isModerator?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    isModerator?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    isModerator?: SortOrder
  }

  export type TagCountOrderByAggregateInput = {
    name?: SortOrder
  }

  export type TagMaxOrderByAggregateInput = {
    name?: SortOrder
  }

  export type TagMinOrderByAggregateInput = {
    name?: SortOrder
  }

  export type PromptListRelationFilter = {
    every?: PromptWhereInput
    some?: PromptWhereInput
    none?: PromptWhereInput
  }

  export type PromptOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LLMCountOrderByAggregateInput = {
    llmName?: SortOrder
  }

  export type LLMMaxOrderByAggregateInput = {
    llmName?: SortOrder
  }

  export type LLMMinOrderByAggregateInput = {
    llmName?: SortOrder
  }

  export type AccountRelationFilter = {
    is?: AccountWhereInput
    isNot?: AccountWhereInput
  }

  export type PromptRelationFilter = {
    is?: PromptWhereInput
    isNot?: PromptWhereInput
  }

  export type BookMarkedCountOrderByAggregateInput = {
    accountID?: SortOrder
    promptID?: SortOrder
  }

  export type BookMarkedMaxOrderByAggregateInput = {
    accountID?: SortOrder
    promptID?: SortOrder
  }

  export type BookMarkedMinOrderByAggregateInput = {
    accountID?: SortOrder
    promptID?: SortOrder
  }

  export type TagRelationFilter = {
    is?: TagWhereInput
    isNot?: TagWhereInput
  }

  export type HasTagCountOrderByAggregateInput = {
    tagName?: SortOrder
    promptID?: SortOrder
  }

  export type HasTagMaxOrderByAggregateInput = {
    tagName?: SortOrder
    promptID?: SortOrder
  }

  export type HasTagMinOrderByAggregateInput = {
    tagName?: SortOrder
    promptID?: SortOrder
  }

  export type HasTagCreateNestedManyWithoutPromptInput = {
    create?: XOR<HasTagCreateWithoutPromptInput, HasTagUncheckedCreateWithoutPromptInput> | HasTagCreateWithoutPromptInput[] | HasTagUncheckedCreateWithoutPromptInput[]
    connectOrCreate?: HasTagCreateOrConnectWithoutPromptInput | HasTagCreateOrConnectWithoutPromptInput[]
    createMany?: HasTagCreateManyPromptInputEnvelope
    connect?: HasTagWhereUniqueInput | HasTagWhereUniqueInput[]
  }

  export type BookMarkedCreateNestedManyWithoutPromptInput = {
    create?: XOR<BookMarkedCreateWithoutPromptInput, BookMarkedUncheckedCreateWithoutPromptInput> | BookMarkedCreateWithoutPromptInput[] | BookMarkedUncheckedCreateWithoutPromptInput[]
    connectOrCreate?: BookMarkedCreateOrConnectWithoutPromptInput | BookMarkedCreateOrConnectWithoutPromptInput[]
    createMany?: BookMarkedCreateManyPromptInputEnvelope
    connect?: BookMarkedWhereUniqueInput | BookMarkedWhereUniqueInput[]
  }

  export type LLMCreateNestedOneWithoutPromptInput = {
    create?: XOR<LLMCreateWithoutPromptInput, LLMUncheckedCreateWithoutPromptInput>
    connectOrCreate?: LLMCreateOrConnectWithoutPromptInput
    connect?: LLMWhereUniqueInput
  }

  export type HasTagUncheckedCreateNestedManyWithoutPromptInput = {
    create?: XOR<HasTagCreateWithoutPromptInput, HasTagUncheckedCreateWithoutPromptInput> | HasTagCreateWithoutPromptInput[] | HasTagUncheckedCreateWithoutPromptInput[]
    connectOrCreate?: HasTagCreateOrConnectWithoutPromptInput | HasTagCreateOrConnectWithoutPromptInput[]
    createMany?: HasTagCreateManyPromptInputEnvelope
    connect?: HasTagWhereUniqueInput | HasTagWhereUniqueInput[]
  }

  export type BookMarkedUncheckedCreateNestedManyWithoutPromptInput = {
    create?: XOR<BookMarkedCreateWithoutPromptInput, BookMarkedUncheckedCreateWithoutPromptInput> | BookMarkedCreateWithoutPromptInput[] | BookMarkedUncheckedCreateWithoutPromptInput[]
    connectOrCreate?: BookMarkedCreateOrConnectWithoutPromptInput | BookMarkedCreateOrConnectWithoutPromptInput[]
    createMany?: BookMarkedCreateManyPromptInputEnvelope
    connect?: BookMarkedWhereUniqueInput | BookMarkedWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type HasTagUpdateManyWithoutPromptNestedInput = {
    create?: XOR<HasTagCreateWithoutPromptInput, HasTagUncheckedCreateWithoutPromptInput> | HasTagCreateWithoutPromptInput[] | HasTagUncheckedCreateWithoutPromptInput[]
    connectOrCreate?: HasTagCreateOrConnectWithoutPromptInput | HasTagCreateOrConnectWithoutPromptInput[]
    upsert?: HasTagUpsertWithWhereUniqueWithoutPromptInput | HasTagUpsertWithWhereUniqueWithoutPromptInput[]
    createMany?: HasTagCreateManyPromptInputEnvelope
    set?: HasTagWhereUniqueInput | HasTagWhereUniqueInput[]
    disconnect?: HasTagWhereUniqueInput | HasTagWhereUniqueInput[]
    delete?: HasTagWhereUniqueInput | HasTagWhereUniqueInput[]
    connect?: HasTagWhereUniqueInput | HasTagWhereUniqueInput[]
    update?: HasTagUpdateWithWhereUniqueWithoutPromptInput | HasTagUpdateWithWhereUniqueWithoutPromptInput[]
    updateMany?: HasTagUpdateManyWithWhereWithoutPromptInput | HasTagUpdateManyWithWhereWithoutPromptInput[]
    deleteMany?: HasTagScalarWhereInput | HasTagScalarWhereInput[]
  }

  export type BookMarkedUpdateManyWithoutPromptNestedInput = {
    create?: XOR<BookMarkedCreateWithoutPromptInput, BookMarkedUncheckedCreateWithoutPromptInput> | BookMarkedCreateWithoutPromptInput[] | BookMarkedUncheckedCreateWithoutPromptInput[]
    connectOrCreate?: BookMarkedCreateOrConnectWithoutPromptInput | BookMarkedCreateOrConnectWithoutPromptInput[]
    upsert?: BookMarkedUpsertWithWhereUniqueWithoutPromptInput | BookMarkedUpsertWithWhereUniqueWithoutPromptInput[]
    createMany?: BookMarkedCreateManyPromptInputEnvelope
    set?: BookMarkedWhereUniqueInput | BookMarkedWhereUniqueInput[]
    disconnect?: BookMarkedWhereUniqueInput | BookMarkedWhereUniqueInput[]
    delete?: BookMarkedWhereUniqueInput | BookMarkedWhereUniqueInput[]
    connect?: BookMarkedWhereUniqueInput | BookMarkedWhereUniqueInput[]
    update?: BookMarkedUpdateWithWhereUniqueWithoutPromptInput | BookMarkedUpdateWithWhereUniqueWithoutPromptInput[]
    updateMany?: BookMarkedUpdateManyWithWhereWithoutPromptInput | BookMarkedUpdateManyWithWhereWithoutPromptInput[]
    deleteMany?: BookMarkedScalarWhereInput | BookMarkedScalarWhereInput[]
  }

  export type LLMUpdateOneRequiredWithoutPromptNestedInput = {
    create?: XOR<LLMCreateWithoutPromptInput, LLMUncheckedCreateWithoutPromptInput>
    connectOrCreate?: LLMCreateOrConnectWithoutPromptInput
    upsert?: LLMUpsertWithoutPromptInput
    connect?: LLMWhereUniqueInput
    update?: XOR<XOR<LLMUpdateToOneWithWhereWithoutPromptInput, LLMUpdateWithoutPromptInput>, LLMUncheckedUpdateWithoutPromptInput>
  }

  export type HasTagUncheckedUpdateManyWithoutPromptNestedInput = {
    create?: XOR<HasTagCreateWithoutPromptInput, HasTagUncheckedCreateWithoutPromptInput> | HasTagCreateWithoutPromptInput[] | HasTagUncheckedCreateWithoutPromptInput[]
    connectOrCreate?: HasTagCreateOrConnectWithoutPromptInput | HasTagCreateOrConnectWithoutPromptInput[]
    upsert?: HasTagUpsertWithWhereUniqueWithoutPromptInput | HasTagUpsertWithWhereUniqueWithoutPromptInput[]
    createMany?: HasTagCreateManyPromptInputEnvelope
    set?: HasTagWhereUniqueInput | HasTagWhereUniqueInput[]
    disconnect?: HasTagWhereUniqueInput | HasTagWhereUniqueInput[]
    delete?: HasTagWhereUniqueInput | HasTagWhereUniqueInput[]
    connect?: HasTagWhereUniqueInput | HasTagWhereUniqueInput[]
    update?: HasTagUpdateWithWhereUniqueWithoutPromptInput | HasTagUpdateWithWhereUniqueWithoutPromptInput[]
    updateMany?: HasTagUpdateManyWithWhereWithoutPromptInput | HasTagUpdateManyWithWhereWithoutPromptInput[]
    deleteMany?: HasTagScalarWhereInput | HasTagScalarWhereInput[]
  }

  export type BookMarkedUncheckedUpdateManyWithoutPromptNestedInput = {
    create?: XOR<BookMarkedCreateWithoutPromptInput, BookMarkedUncheckedCreateWithoutPromptInput> | BookMarkedCreateWithoutPromptInput[] | BookMarkedUncheckedCreateWithoutPromptInput[]
    connectOrCreate?: BookMarkedCreateOrConnectWithoutPromptInput | BookMarkedCreateOrConnectWithoutPromptInput[]
    upsert?: BookMarkedUpsertWithWhereUniqueWithoutPromptInput | BookMarkedUpsertWithWhereUniqueWithoutPromptInput[]
    createMany?: BookMarkedCreateManyPromptInputEnvelope
    set?: BookMarkedWhereUniqueInput | BookMarkedWhereUniqueInput[]
    disconnect?: BookMarkedWhereUniqueInput | BookMarkedWhereUniqueInput[]
    delete?: BookMarkedWhereUniqueInput | BookMarkedWhereUniqueInput[]
    connect?: BookMarkedWhereUniqueInput | BookMarkedWhereUniqueInput[]
    update?: BookMarkedUpdateWithWhereUniqueWithoutPromptInput | BookMarkedUpdateWithWhereUniqueWithoutPromptInput[]
    updateMany?: BookMarkedUpdateManyWithWhereWithoutPromptInput | BookMarkedUpdateManyWithWhereWithoutPromptInput[]
    deleteMany?: BookMarkedScalarWhereInput | BookMarkedScalarWhereInput[]
  }

  export type BookMarkedCreateNestedManyWithoutAccountInput = {
    create?: XOR<BookMarkedCreateWithoutAccountInput, BookMarkedUncheckedCreateWithoutAccountInput> | BookMarkedCreateWithoutAccountInput[] | BookMarkedUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: BookMarkedCreateOrConnectWithoutAccountInput | BookMarkedCreateOrConnectWithoutAccountInput[]
    createMany?: BookMarkedCreateManyAccountInputEnvelope
    connect?: BookMarkedWhereUniqueInput | BookMarkedWhereUniqueInput[]
  }

  export type BookMarkedUncheckedCreateNestedManyWithoutAccountInput = {
    create?: XOR<BookMarkedCreateWithoutAccountInput, BookMarkedUncheckedCreateWithoutAccountInput> | BookMarkedCreateWithoutAccountInput[] | BookMarkedUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: BookMarkedCreateOrConnectWithoutAccountInput | BookMarkedCreateOrConnectWithoutAccountInput[]
    createMany?: BookMarkedCreateManyAccountInputEnvelope
    connect?: BookMarkedWhereUniqueInput | BookMarkedWhereUniqueInput[]
  }

  export type BookMarkedUpdateManyWithoutAccountNestedInput = {
    create?: XOR<BookMarkedCreateWithoutAccountInput, BookMarkedUncheckedCreateWithoutAccountInput> | BookMarkedCreateWithoutAccountInput[] | BookMarkedUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: BookMarkedCreateOrConnectWithoutAccountInput | BookMarkedCreateOrConnectWithoutAccountInput[]
    upsert?: BookMarkedUpsertWithWhereUniqueWithoutAccountInput | BookMarkedUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: BookMarkedCreateManyAccountInputEnvelope
    set?: BookMarkedWhereUniqueInput | BookMarkedWhereUniqueInput[]
    disconnect?: BookMarkedWhereUniqueInput | BookMarkedWhereUniqueInput[]
    delete?: BookMarkedWhereUniqueInput | BookMarkedWhereUniqueInput[]
    connect?: BookMarkedWhereUniqueInput | BookMarkedWhereUniqueInput[]
    update?: BookMarkedUpdateWithWhereUniqueWithoutAccountInput | BookMarkedUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: BookMarkedUpdateManyWithWhereWithoutAccountInput | BookMarkedUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: BookMarkedScalarWhereInput | BookMarkedScalarWhereInput[]
  }

  export type BookMarkedUncheckedUpdateManyWithoutAccountNestedInput = {
    create?: XOR<BookMarkedCreateWithoutAccountInput, BookMarkedUncheckedCreateWithoutAccountInput> | BookMarkedCreateWithoutAccountInput[] | BookMarkedUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: BookMarkedCreateOrConnectWithoutAccountInput | BookMarkedCreateOrConnectWithoutAccountInput[]
    upsert?: BookMarkedUpsertWithWhereUniqueWithoutAccountInput | BookMarkedUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: BookMarkedCreateManyAccountInputEnvelope
    set?: BookMarkedWhereUniqueInput | BookMarkedWhereUniqueInput[]
    disconnect?: BookMarkedWhereUniqueInput | BookMarkedWhereUniqueInput[]
    delete?: BookMarkedWhereUniqueInput | BookMarkedWhereUniqueInput[]
    connect?: BookMarkedWhereUniqueInput | BookMarkedWhereUniqueInput[]
    update?: BookMarkedUpdateWithWhereUniqueWithoutAccountInput | BookMarkedUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: BookMarkedUpdateManyWithWhereWithoutAccountInput | BookMarkedUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: BookMarkedScalarWhereInput | BookMarkedScalarWhereInput[]
  }

  export type HasTagCreateNestedManyWithoutTagInput = {
    create?: XOR<HasTagCreateWithoutTagInput, HasTagUncheckedCreateWithoutTagInput> | HasTagCreateWithoutTagInput[] | HasTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: HasTagCreateOrConnectWithoutTagInput | HasTagCreateOrConnectWithoutTagInput[]
    createMany?: HasTagCreateManyTagInputEnvelope
    connect?: HasTagWhereUniqueInput | HasTagWhereUniqueInput[]
  }

  export type HasTagUncheckedCreateNestedManyWithoutTagInput = {
    create?: XOR<HasTagCreateWithoutTagInput, HasTagUncheckedCreateWithoutTagInput> | HasTagCreateWithoutTagInput[] | HasTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: HasTagCreateOrConnectWithoutTagInput | HasTagCreateOrConnectWithoutTagInput[]
    createMany?: HasTagCreateManyTagInputEnvelope
    connect?: HasTagWhereUniqueInput | HasTagWhereUniqueInput[]
  }

  export type HasTagUpdateManyWithoutTagNestedInput = {
    create?: XOR<HasTagCreateWithoutTagInput, HasTagUncheckedCreateWithoutTagInput> | HasTagCreateWithoutTagInput[] | HasTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: HasTagCreateOrConnectWithoutTagInput | HasTagCreateOrConnectWithoutTagInput[]
    upsert?: HasTagUpsertWithWhereUniqueWithoutTagInput | HasTagUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: HasTagCreateManyTagInputEnvelope
    set?: HasTagWhereUniqueInput | HasTagWhereUniqueInput[]
    disconnect?: HasTagWhereUniqueInput | HasTagWhereUniqueInput[]
    delete?: HasTagWhereUniqueInput | HasTagWhereUniqueInput[]
    connect?: HasTagWhereUniqueInput | HasTagWhereUniqueInput[]
    update?: HasTagUpdateWithWhereUniqueWithoutTagInput | HasTagUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: HasTagUpdateManyWithWhereWithoutTagInput | HasTagUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: HasTagScalarWhereInput | HasTagScalarWhereInput[]
  }

  export type HasTagUncheckedUpdateManyWithoutTagNestedInput = {
    create?: XOR<HasTagCreateWithoutTagInput, HasTagUncheckedCreateWithoutTagInput> | HasTagCreateWithoutTagInput[] | HasTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: HasTagCreateOrConnectWithoutTagInput | HasTagCreateOrConnectWithoutTagInput[]
    upsert?: HasTagUpsertWithWhereUniqueWithoutTagInput | HasTagUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: HasTagCreateManyTagInputEnvelope
    set?: HasTagWhereUniqueInput | HasTagWhereUniqueInput[]
    disconnect?: HasTagWhereUniqueInput | HasTagWhereUniqueInput[]
    delete?: HasTagWhereUniqueInput | HasTagWhereUniqueInput[]
    connect?: HasTagWhereUniqueInput | HasTagWhereUniqueInput[]
    update?: HasTagUpdateWithWhereUniqueWithoutTagInput | HasTagUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: HasTagUpdateManyWithWhereWithoutTagInput | HasTagUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: HasTagScalarWhereInput | HasTagScalarWhereInput[]
  }

  export type PromptCreateNestedManyWithoutLlmInput = {
    create?: XOR<PromptCreateWithoutLlmInput, PromptUncheckedCreateWithoutLlmInput> | PromptCreateWithoutLlmInput[] | PromptUncheckedCreateWithoutLlmInput[]
    connectOrCreate?: PromptCreateOrConnectWithoutLlmInput | PromptCreateOrConnectWithoutLlmInput[]
    createMany?: PromptCreateManyLlmInputEnvelope
    connect?: PromptWhereUniqueInput | PromptWhereUniqueInput[]
  }

  export type PromptUncheckedCreateNestedManyWithoutLlmInput = {
    create?: XOR<PromptCreateWithoutLlmInput, PromptUncheckedCreateWithoutLlmInput> | PromptCreateWithoutLlmInput[] | PromptUncheckedCreateWithoutLlmInput[]
    connectOrCreate?: PromptCreateOrConnectWithoutLlmInput | PromptCreateOrConnectWithoutLlmInput[]
    createMany?: PromptCreateManyLlmInputEnvelope
    connect?: PromptWhereUniqueInput | PromptWhereUniqueInput[]
  }

  export type PromptUpdateManyWithoutLlmNestedInput = {
    create?: XOR<PromptCreateWithoutLlmInput, PromptUncheckedCreateWithoutLlmInput> | PromptCreateWithoutLlmInput[] | PromptUncheckedCreateWithoutLlmInput[]
    connectOrCreate?: PromptCreateOrConnectWithoutLlmInput | PromptCreateOrConnectWithoutLlmInput[]
    upsert?: PromptUpsertWithWhereUniqueWithoutLlmInput | PromptUpsertWithWhereUniqueWithoutLlmInput[]
    createMany?: PromptCreateManyLlmInputEnvelope
    set?: PromptWhereUniqueInput | PromptWhereUniqueInput[]
    disconnect?: PromptWhereUniqueInput | PromptWhereUniqueInput[]
    delete?: PromptWhereUniqueInput | PromptWhereUniqueInput[]
    connect?: PromptWhereUniqueInput | PromptWhereUniqueInput[]
    update?: PromptUpdateWithWhereUniqueWithoutLlmInput | PromptUpdateWithWhereUniqueWithoutLlmInput[]
    updateMany?: PromptUpdateManyWithWhereWithoutLlmInput | PromptUpdateManyWithWhereWithoutLlmInput[]
    deleteMany?: PromptScalarWhereInput | PromptScalarWhereInput[]
  }

  export type PromptUncheckedUpdateManyWithoutLlmNestedInput = {
    create?: XOR<PromptCreateWithoutLlmInput, PromptUncheckedCreateWithoutLlmInput> | PromptCreateWithoutLlmInput[] | PromptUncheckedCreateWithoutLlmInput[]
    connectOrCreate?: PromptCreateOrConnectWithoutLlmInput | PromptCreateOrConnectWithoutLlmInput[]
    upsert?: PromptUpsertWithWhereUniqueWithoutLlmInput | PromptUpsertWithWhereUniqueWithoutLlmInput[]
    createMany?: PromptCreateManyLlmInputEnvelope
    set?: PromptWhereUniqueInput | PromptWhereUniqueInput[]
    disconnect?: PromptWhereUniqueInput | PromptWhereUniqueInput[]
    delete?: PromptWhereUniqueInput | PromptWhereUniqueInput[]
    connect?: PromptWhereUniqueInput | PromptWhereUniqueInput[]
    update?: PromptUpdateWithWhereUniqueWithoutLlmInput | PromptUpdateWithWhereUniqueWithoutLlmInput[]
    updateMany?: PromptUpdateManyWithWhereWithoutLlmInput | PromptUpdateManyWithWhereWithoutLlmInput[]
    deleteMany?: PromptScalarWhereInput | PromptScalarWhereInput[]
  }

  export type AccountCreateNestedOneWithoutBookMarkedInput = {
    create?: XOR<AccountCreateWithoutBookMarkedInput, AccountUncheckedCreateWithoutBookMarkedInput>
    connectOrCreate?: AccountCreateOrConnectWithoutBookMarkedInput
    connect?: AccountWhereUniqueInput
  }

  export type PromptCreateNestedOneWithoutBookMarkedInput = {
    create?: XOR<PromptCreateWithoutBookMarkedInput, PromptUncheckedCreateWithoutBookMarkedInput>
    connectOrCreate?: PromptCreateOrConnectWithoutBookMarkedInput
    connect?: PromptWhereUniqueInput
  }

  export type AccountUpdateOneRequiredWithoutBookMarkedNestedInput = {
    create?: XOR<AccountCreateWithoutBookMarkedInput, AccountUncheckedCreateWithoutBookMarkedInput>
    connectOrCreate?: AccountCreateOrConnectWithoutBookMarkedInput
    upsert?: AccountUpsertWithoutBookMarkedInput
    connect?: AccountWhereUniqueInput
    update?: XOR<XOR<AccountUpdateToOneWithWhereWithoutBookMarkedInput, AccountUpdateWithoutBookMarkedInput>, AccountUncheckedUpdateWithoutBookMarkedInput>
  }

  export type PromptUpdateOneRequiredWithoutBookMarkedNestedInput = {
    create?: XOR<PromptCreateWithoutBookMarkedInput, PromptUncheckedCreateWithoutBookMarkedInput>
    connectOrCreate?: PromptCreateOrConnectWithoutBookMarkedInput
    upsert?: PromptUpsertWithoutBookMarkedInput
    connect?: PromptWhereUniqueInput
    update?: XOR<XOR<PromptUpdateToOneWithWhereWithoutBookMarkedInput, PromptUpdateWithoutBookMarkedInput>, PromptUncheckedUpdateWithoutBookMarkedInput>
  }

  export type PromptCreateNestedOneWithoutHasTagInput = {
    create?: XOR<PromptCreateWithoutHasTagInput, PromptUncheckedCreateWithoutHasTagInput>
    connectOrCreate?: PromptCreateOrConnectWithoutHasTagInput
    connect?: PromptWhereUniqueInput
  }

  export type TagCreateNestedOneWithoutHasTagInput = {
    create?: XOR<TagCreateWithoutHasTagInput, TagUncheckedCreateWithoutHasTagInput>
    connectOrCreate?: TagCreateOrConnectWithoutHasTagInput
    connect?: TagWhereUniqueInput
  }

  export type PromptUpdateOneRequiredWithoutHasTagNestedInput = {
    create?: XOR<PromptCreateWithoutHasTagInput, PromptUncheckedCreateWithoutHasTagInput>
    connectOrCreate?: PromptCreateOrConnectWithoutHasTagInput
    upsert?: PromptUpsertWithoutHasTagInput
    connect?: PromptWhereUniqueInput
    update?: XOR<XOR<PromptUpdateToOneWithWhereWithoutHasTagInput, PromptUpdateWithoutHasTagInput>, PromptUncheckedUpdateWithoutHasTagInput>
  }

  export type TagUpdateOneRequiredWithoutHasTagNestedInput = {
    create?: XOR<TagCreateWithoutHasTagInput, TagUncheckedCreateWithoutHasTagInput>
    connectOrCreate?: TagCreateOrConnectWithoutHasTagInput
    upsert?: TagUpsertWithoutHasTagInput
    connect?: TagWhereUniqueInput
    update?: XOR<XOR<TagUpdateToOneWithWhereWithoutHasTagInput, TagUpdateWithoutHasTagInput>, TagUncheckedUpdateWithoutHasTagInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type HasTagCreateWithoutPromptInput = {
    tag: TagCreateNestedOneWithoutHasTagInput
  }

  export type HasTagUncheckedCreateWithoutPromptInput = {
    tagName: string
  }

  export type HasTagCreateOrConnectWithoutPromptInput = {
    where: HasTagWhereUniqueInput
    create: XOR<HasTagCreateWithoutPromptInput, HasTagUncheckedCreateWithoutPromptInput>
  }

  export type HasTagCreateManyPromptInputEnvelope = {
    data: HasTagCreateManyPromptInput | HasTagCreateManyPromptInput[]
    skipDuplicates?: boolean
  }

  export type BookMarkedCreateWithoutPromptInput = {
    account: AccountCreateNestedOneWithoutBookMarkedInput
  }

  export type BookMarkedUncheckedCreateWithoutPromptInput = {
    accountID: string
  }

  export type BookMarkedCreateOrConnectWithoutPromptInput = {
    where: BookMarkedWhereUniqueInput
    create: XOR<BookMarkedCreateWithoutPromptInput, BookMarkedUncheckedCreateWithoutPromptInput>
  }

  export type BookMarkedCreateManyPromptInputEnvelope = {
    data: BookMarkedCreateManyPromptInput | BookMarkedCreateManyPromptInput[]
    skipDuplicates?: boolean
  }

  export type LLMCreateWithoutPromptInput = {
    llmName: string
  }

  export type LLMUncheckedCreateWithoutPromptInput = {
    llmName: string
  }

  export type LLMCreateOrConnectWithoutPromptInput = {
    where: LLMWhereUniqueInput
    create: XOR<LLMCreateWithoutPromptInput, LLMUncheckedCreateWithoutPromptInput>
  }

  export type HasTagUpsertWithWhereUniqueWithoutPromptInput = {
    where: HasTagWhereUniqueInput
    update: XOR<HasTagUpdateWithoutPromptInput, HasTagUncheckedUpdateWithoutPromptInput>
    create: XOR<HasTagCreateWithoutPromptInput, HasTagUncheckedCreateWithoutPromptInput>
  }

  export type HasTagUpdateWithWhereUniqueWithoutPromptInput = {
    where: HasTagWhereUniqueInput
    data: XOR<HasTagUpdateWithoutPromptInput, HasTagUncheckedUpdateWithoutPromptInput>
  }

  export type HasTagUpdateManyWithWhereWithoutPromptInput = {
    where: HasTagScalarWhereInput
    data: XOR<HasTagUpdateManyMutationInput, HasTagUncheckedUpdateManyWithoutPromptInput>
  }

  export type HasTagScalarWhereInput = {
    AND?: HasTagScalarWhereInput | HasTagScalarWhereInput[]
    OR?: HasTagScalarWhereInput[]
    NOT?: HasTagScalarWhereInput | HasTagScalarWhereInput[]
    tagName?: StringFilter<"HasTag"> | string
    promptID?: StringFilter<"HasTag"> | string
  }

  export type BookMarkedUpsertWithWhereUniqueWithoutPromptInput = {
    where: BookMarkedWhereUniqueInput
    update: XOR<BookMarkedUpdateWithoutPromptInput, BookMarkedUncheckedUpdateWithoutPromptInput>
    create: XOR<BookMarkedCreateWithoutPromptInput, BookMarkedUncheckedCreateWithoutPromptInput>
  }

  export type BookMarkedUpdateWithWhereUniqueWithoutPromptInput = {
    where: BookMarkedWhereUniqueInput
    data: XOR<BookMarkedUpdateWithoutPromptInput, BookMarkedUncheckedUpdateWithoutPromptInput>
  }

  export type BookMarkedUpdateManyWithWhereWithoutPromptInput = {
    where: BookMarkedScalarWhereInput
    data: XOR<BookMarkedUpdateManyMutationInput, BookMarkedUncheckedUpdateManyWithoutPromptInput>
  }

  export type BookMarkedScalarWhereInput = {
    AND?: BookMarkedScalarWhereInput | BookMarkedScalarWhereInput[]
    OR?: BookMarkedScalarWhereInput[]
    NOT?: BookMarkedScalarWhereInput | BookMarkedScalarWhereInput[]
    accountID?: StringFilter<"BookMarked"> | string
    promptID?: StringFilter<"BookMarked"> | string
  }

  export type LLMUpsertWithoutPromptInput = {
    update: XOR<LLMUpdateWithoutPromptInput, LLMUncheckedUpdateWithoutPromptInput>
    create: XOR<LLMCreateWithoutPromptInput, LLMUncheckedCreateWithoutPromptInput>
    where?: LLMWhereInput
  }

  export type LLMUpdateToOneWithWhereWithoutPromptInput = {
    where?: LLMWhereInput
    data: XOR<LLMUpdateWithoutPromptInput, LLMUncheckedUpdateWithoutPromptInput>
  }

  export type LLMUpdateWithoutPromptInput = {
    llmName?: StringFieldUpdateOperationsInput | string
  }

  export type LLMUncheckedUpdateWithoutPromptInput = {
    llmName?: StringFieldUpdateOperationsInput | string
  }

  export type BookMarkedCreateWithoutAccountInput = {
    prompt: PromptCreateNestedOneWithoutBookMarkedInput
  }

  export type BookMarkedUncheckedCreateWithoutAccountInput = {
    promptID: string
  }

  export type BookMarkedCreateOrConnectWithoutAccountInput = {
    where: BookMarkedWhereUniqueInput
    create: XOR<BookMarkedCreateWithoutAccountInput, BookMarkedUncheckedCreateWithoutAccountInput>
  }

  export type BookMarkedCreateManyAccountInputEnvelope = {
    data: BookMarkedCreateManyAccountInput | BookMarkedCreateManyAccountInput[]
    skipDuplicates?: boolean
  }

  export type BookMarkedUpsertWithWhereUniqueWithoutAccountInput = {
    where: BookMarkedWhereUniqueInput
    update: XOR<BookMarkedUpdateWithoutAccountInput, BookMarkedUncheckedUpdateWithoutAccountInput>
    create: XOR<BookMarkedCreateWithoutAccountInput, BookMarkedUncheckedCreateWithoutAccountInput>
  }

  export type BookMarkedUpdateWithWhereUniqueWithoutAccountInput = {
    where: BookMarkedWhereUniqueInput
    data: XOR<BookMarkedUpdateWithoutAccountInput, BookMarkedUncheckedUpdateWithoutAccountInput>
  }

  export type BookMarkedUpdateManyWithWhereWithoutAccountInput = {
    where: BookMarkedScalarWhereInput
    data: XOR<BookMarkedUpdateManyMutationInput, BookMarkedUncheckedUpdateManyWithoutAccountInput>
  }

  export type HasTagCreateWithoutTagInput = {
    prompt: PromptCreateNestedOneWithoutHasTagInput
  }

  export type HasTagUncheckedCreateWithoutTagInput = {
    promptID: string
  }

  export type HasTagCreateOrConnectWithoutTagInput = {
    where: HasTagWhereUniqueInput
    create: XOR<HasTagCreateWithoutTagInput, HasTagUncheckedCreateWithoutTagInput>
  }

  export type HasTagCreateManyTagInputEnvelope = {
    data: HasTagCreateManyTagInput | HasTagCreateManyTagInput[]
    skipDuplicates?: boolean
  }

  export type HasTagUpsertWithWhereUniqueWithoutTagInput = {
    where: HasTagWhereUniqueInput
    update: XOR<HasTagUpdateWithoutTagInput, HasTagUncheckedUpdateWithoutTagInput>
    create: XOR<HasTagCreateWithoutTagInput, HasTagUncheckedCreateWithoutTagInput>
  }

  export type HasTagUpdateWithWhereUniqueWithoutTagInput = {
    where: HasTagWhereUniqueInput
    data: XOR<HasTagUpdateWithoutTagInput, HasTagUncheckedUpdateWithoutTagInput>
  }

  export type HasTagUpdateManyWithWhereWithoutTagInput = {
    where: HasTagScalarWhereInput
    data: XOR<HasTagUpdateManyMutationInput, HasTagUncheckedUpdateManyWithoutTagInput>
  }

  export type PromptCreateWithoutLlmInput = {
    id?: string
    prompt: string
    response: string
    image: string
    rating: number
    approved: boolean
    createdAt?: Date | string
    hasTag?: HasTagCreateNestedManyWithoutPromptInput
    BookMarked?: BookMarkedCreateNestedManyWithoutPromptInput
  }

  export type PromptUncheckedCreateWithoutLlmInput = {
    id?: string
    prompt: string
    response: string
    image: string
    rating: number
    approved: boolean
    createdAt?: Date | string
    hasTag?: HasTagUncheckedCreateNestedManyWithoutPromptInput
    BookMarked?: BookMarkedUncheckedCreateNestedManyWithoutPromptInput
  }

  export type PromptCreateOrConnectWithoutLlmInput = {
    where: PromptWhereUniqueInput
    create: XOR<PromptCreateWithoutLlmInput, PromptUncheckedCreateWithoutLlmInput>
  }

  export type PromptCreateManyLlmInputEnvelope = {
    data: PromptCreateManyLlmInput | PromptCreateManyLlmInput[]
    skipDuplicates?: boolean
  }

  export type PromptUpsertWithWhereUniqueWithoutLlmInput = {
    where: PromptWhereUniqueInput
    update: XOR<PromptUpdateWithoutLlmInput, PromptUncheckedUpdateWithoutLlmInput>
    create: XOR<PromptCreateWithoutLlmInput, PromptUncheckedCreateWithoutLlmInput>
  }

  export type PromptUpdateWithWhereUniqueWithoutLlmInput = {
    where: PromptWhereUniqueInput
    data: XOR<PromptUpdateWithoutLlmInput, PromptUncheckedUpdateWithoutLlmInput>
  }

  export type PromptUpdateManyWithWhereWithoutLlmInput = {
    where: PromptScalarWhereInput
    data: XOR<PromptUpdateManyMutationInput, PromptUncheckedUpdateManyWithoutLlmInput>
  }

  export type PromptScalarWhereInput = {
    AND?: PromptScalarWhereInput | PromptScalarWhereInput[]
    OR?: PromptScalarWhereInput[]
    NOT?: PromptScalarWhereInput | PromptScalarWhereInput[]
    id?: StringFilter<"Prompt"> | string
    prompt?: StringFilter<"Prompt"> | string
    response?: StringFilter<"Prompt"> | string
    image?: StringFilter<"Prompt"> | string
    rating?: FloatFilter<"Prompt"> | number
    approved?: BoolFilter<"Prompt"> | boolean
    llmName?: StringFilter<"Prompt"> | string
    createdAt?: DateTimeFilter<"Prompt"> | Date | string
  }

  export type AccountCreateWithoutBookMarkedInput = {
    id?: string
    isModerator: boolean
  }

  export type AccountUncheckedCreateWithoutBookMarkedInput = {
    id?: string
    isModerator: boolean
  }

  export type AccountCreateOrConnectWithoutBookMarkedInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutBookMarkedInput, AccountUncheckedCreateWithoutBookMarkedInput>
  }

  export type PromptCreateWithoutBookMarkedInput = {
    id?: string
    prompt: string
    response: string
    image: string
    rating: number
    approved: boolean
    createdAt?: Date | string
    hasTag?: HasTagCreateNestedManyWithoutPromptInput
    llm: LLMCreateNestedOneWithoutPromptInput
  }

  export type PromptUncheckedCreateWithoutBookMarkedInput = {
    id?: string
    prompt: string
    response: string
    image: string
    rating: number
    approved: boolean
    llmName: string
    createdAt?: Date | string
    hasTag?: HasTagUncheckedCreateNestedManyWithoutPromptInput
  }

  export type PromptCreateOrConnectWithoutBookMarkedInput = {
    where: PromptWhereUniqueInput
    create: XOR<PromptCreateWithoutBookMarkedInput, PromptUncheckedCreateWithoutBookMarkedInput>
  }

  export type AccountUpsertWithoutBookMarkedInput = {
    update: XOR<AccountUpdateWithoutBookMarkedInput, AccountUncheckedUpdateWithoutBookMarkedInput>
    create: XOR<AccountCreateWithoutBookMarkedInput, AccountUncheckedCreateWithoutBookMarkedInput>
    where?: AccountWhereInput
  }

  export type AccountUpdateToOneWithWhereWithoutBookMarkedInput = {
    where?: AccountWhereInput
    data: XOR<AccountUpdateWithoutBookMarkedInput, AccountUncheckedUpdateWithoutBookMarkedInput>
  }

  export type AccountUpdateWithoutBookMarkedInput = {
    id?: StringFieldUpdateOperationsInput | string
    isModerator?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AccountUncheckedUpdateWithoutBookMarkedInput = {
    id?: StringFieldUpdateOperationsInput | string
    isModerator?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PromptUpsertWithoutBookMarkedInput = {
    update: XOR<PromptUpdateWithoutBookMarkedInput, PromptUncheckedUpdateWithoutBookMarkedInput>
    create: XOR<PromptCreateWithoutBookMarkedInput, PromptUncheckedCreateWithoutBookMarkedInput>
    where?: PromptWhereInput
  }

  export type PromptUpdateToOneWithWhereWithoutBookMarkedInput = {
    where?: PromptWhereInput
    data: XOR<PromptUpdateWithoutBookMarkedInput, PromptUncheckedUpdateWithoutBookMarkedInput>
  }

  export type PromptUpdateWithoutBookMarkedInput = {
    id?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    approved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hasTag?: HasTagUpdateManyWithoutPromptNestedInput
    llm?: LLMUpdateOneRequiredWithoutPromptNestedInput
  }

  export type PromptUncheckedUpdateWithoutBookMarkedInput = {
    id?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    approved?: BoolFieldUpdateOperationsInput | boolean
    llmName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hasTag?: HasTagUncheckedUpdateManyWithoutPromptNestedInput
  }

  export type PromptCreateWithoutHasTagInput = {
    id?: string
    prompt: string
    response: string
    image: string
    rating: number
    approved: boolean
    createdAt?: Date | string
    BookMarked?: BookMarkedCreateNestedManyWithoutPromptInput
    llm: LLMCreateNestedOneWithoutPromptInput
  }

  export type PromptUncheckedCreateWithoutHasTagInput = {
    id?: string
    prompt: string
    response: string
    image: string
    rating: number
    approved: boolean
    llmName: string
    createdAt?: Date | string
    BookMarked?: BookMarkedUncheckedCreateNestedManyWithoutPromptInput
  }

  export type PromptCreateOrConnectWithoutHasTagInput = {
    where: PromptWhereUniqueInput
    create: XOR<PromptCreateWithoutHasTagInput, PromptUncheckedCreateWithoutHasTagInput>
  }

  export type TagCreateWithoutHasTagInput = {
    name: string
  }

  export type TagUncheckedCreateWithoutHasTagInput = {
    name: string
  }

  export type TagCreateOrConnectWithoutHasTagInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutHasTagInput, TagUncheckedCreateWithoutHasTagInput>
  }

  export type PromptUpsertWithoutHasTagInput = {
    update: XOR<PromptUpdateWithoutHasTagInput, PromptUncheckedUpdateWithoutHasTagInput>
    create: XOR<PromptCreateWithoutHasTagInput, PromptUncheckedCreateWithoutHasTagInput>
    where?: PromptWhereInput
  }

  export type PromptUpdateToOneWithWhereWithoutHasTagInput = {
    where?: PromptWhereInput
    data: XOR<PromptUpdateWithoutHasTagInput, PromptUncheckedUpdateWithoutHasTagInput>
  }

  export type PromptUpdateWithoutHasTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    approved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    BookMarked?: BookMarkedUpdateManyWithoutPromptNestedInput
    llm?: LLMUpdateOneRequiredWithoutPromptNestedInput
  }

  export type PromptUncheckedUpdateWithoutHasTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    approved?: BoolFieldUpdateOperationsInput | boolean
    llmName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    BookMarked?: BookMarkedUncheckedUpdateManyWithoutPromptNestedInput
  }

  export type TagUpsertWithoutHasTagInput = {
    update: XOR<TagUpdateWithoutHasTagInput, TagUncheckedUpdateWithoutHasTagInput>
    create: XOR<TagCreateWithoutHasTagInput, TagUncheckedCreateWithoutHasTagInput>
    where?: TagWhereInput
  }

  export type TagUpdateToOneWithWhereWithoutHasTagInput = {
    where?: TagWhereInput
    data: XOR<TagUpdateWithoutHasTagInput, TagUncheckedUpdateWithoutHasTagInput>
  }

  export type TagUpdateWithoutHasTagInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TagUncheckedUpdateWithoutHasTagInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type HasTagCreateManyPromptInput = {
    tagName: string
  }

  export type BookMarkedCreateManyPromptInput = {
    accountID: string
  }

  export type HasTagUpdateWithoutPromptInput = {
    tag?: TagUpdateOneRequiredWithoutHasTagNestedInput
  }

  export type HasTagUncheckedUpdateWithoutPromptInput = {
    tagName?: StringFieldUpdateOperationsInput | string
  }

  export type HasTagUncheckedUpdateManyWithoutPromptInput = {
    tagName?: StringFieldUpdateOperationsInput | string
  }

  export type BookMarkedUpdateWithoutPromptInput = {
    account?: AccountUpdateOneRequiredWithoutBookMarkedNestedInput
  }

  export type BookMarkedUncheckedUpdateWithoutPromptInput = {
    accountID?: StringFieldUpdateOperationsInput | string
  }

  export type BookMarkedUncheckedUpdateManyWithoutPromptInput = {
    accountID?: StringFieldUpdateOperationsInput | string
  }

  export type BookMarkedCreateManyAccountInput = {
    promptID: string
  }

  export type BookMarkedUpdateWithoutAccountInput = {
    prompt?: PromptUpdateOneRequiredWithoutBookMarkedNestedInput
  }

  export type BookMarkedUncheckedUpdateWithoutAccountInput = {
    promptID?: StringFieldUpdateOperationsInput | string
  }

  export type BookMarkedUncheckedUpdateManyWithoutAccountInput = {
    promptID?: StringFieldUpdateOperationsInput | string
  }

  export type HasTagCreateManyTagInput = {
    promptID: string
  }

  export type HasTagUpdateWithoutTagInput = {
    prompt?: PromptUpdateOneRequiredWithoutHasTagNestedInput
  }

  export type HasTagUncheckedUpdateWithoutTagInput = {
    promptID?: StringFieldUpdateOperationsInput | string
  }

  export type HasTagUncheckedUpdateManyWithoutTagInput = {
    promptID?: StringFieldUpdateOperationsInput | string
  }

  export type PromptCreateManyLlmInput = {
    id?: string
    prompt: string
    response: string
    image: string
    rating: number
    approved: boolean
    createdAt?: Date | string
  }

  export type PromptUpdateWithoutLlmInput = {
    id?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    approved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hasTag?: HasTagUpdateManyWithoutPromptNestedInput
    BookMarked?: BookMarkedUpdateManyWithoutPromptNestedInput
  }

  export type PromptUncheckedUpdateWithoutLlmInput = {
    id?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    approved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hasTag?: HasTagUncheckedUpdateManyWithoutPromptNestedInput
    BookMarked?: BookMarkedUncheckedUpdateManyWithoutPromptNestedInput
  }

  export type PromptUncheckedUpdateManyWithoutLlmInput = {
    id?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    approved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use PromptCountOutputTypeDefaultArgs instead
     */
    export type PromptCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PromptCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AccountCountOutputTypeDefaultArgs instead
     */
    export type AccountCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AccountCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TagCountOutputTypeDefaultArgs instead
     */
    export type TagCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TagCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LLMCountOutputTypeDefaultArgs instead
     */
    export type LLMCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LLMCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PromptDefaultArgs instead
     */
    export type PromptArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PromptDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AccountDefaultArgs instead
     */
    export type AccountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AccountDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TagDefaultArgs instead
     */
    export type TagArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TagDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LLMDefaultArgs instead
     */
    export type LLMArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LLMDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BookMarkedDefaultArgs instead
     */
    export type BookMarkedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BookMarkedDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HasTagDefaultArgs instead
     */
    export type HasTagArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HasTagDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}